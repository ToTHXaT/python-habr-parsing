[{'author': 'tangro',
  'body': 'Некоторые люди как-то неправильно поняли WebAssembly. Есть те, кто '
          'считает, что раз браузеры уже поддерживают выполнение WebAssembly '
          '(ещё с 2017 года), значит всё уже готово. Даже и близко ещё нет, '
          'готов лишь MVP (минимально жизнеспособный продукт). Я могу '
          'предположить откуда произрастает корень этого заблуждения: после '
          'релиза MVP его разработчики пообещали поддерживать обратную '
          'совместимость на уровне «любой написанный сейчас код будет работать '
          'и в будущем». Но это ведь не значит, что разработка WebAssembly '
          'закончена, совсем нет! Множество фич разрабатывается прямо сейчас и '
          'планируется к разработке в ближайшем будущем. И когда они будут '
          'реализованы — всё очень сильно изменится.\n'
          '\r\n'
          'Все эти фичи можно попробовать представить себе в виде дерева '
          'навыков в какой-нибудь игре. У нас есть пару «базовых» (уже '
          'реализованные фичи) и целое дерево со множеством веток и листьев, '
          'которые будут со временем открываться, давая нам всё больше и '
          'больше могущества.\n'
          '\r\n'
          'Давайте посмотрим на то, что у нас уже есть сейчас и что нам ещё '
          'предстоит открыть.\r\n'
          '(Под катом много картинок, трафик)',
  'full_version': 'habr.com/ru/company/infopulse/blog/428347/',
  'id': '428347',
  'published': '31  октября  2018 в 14:06',
  'title': 'Будущее WebAssembly в виде «дерева навыков»'},
 {'author': 'tangro',
  'body': 'WebAssembly — это новый бинарный формат, в который могут быть '
          'скомпилированы веб-приложения. Он проектируется и реализуется прямо '
          'в тот момент, когда вы читаете эти строки и двигают его вперёд '
          'разработчики всех основных браузеров. Всё меняется очень быстро! В '
          'этой статье мы покажем текущее состояние проекта с достаточно '
          'глубоким погружением в инструментарий по работе с WebAssembly.\n'
          '\r\n'
          'Для того, чтобы WebAssembly заработал, нам нужны две основных '
          'компоненты: инструменты для сборки кода в бинарник формата '
          'WebAssembly и браузеры, способные этот бинарник загрузить и '
          'выполнить. И то, и другое ещё не полностью создано и очень сильно '
          'зависит от завершения работы на спецификацией WebAssembly, но в '
          'общем-то это отдельные компоненты и их развитие идёт параллельно. '
          'Это разделение — хорошая вещь, оно позволит компиляторам создавать '
          'WebAssembly-приложения, способные работать в любом браузере, а '
          'браузерам — запускать WebAssembly-программы не зависимо от того, '
          'каким компилятором они были созданы. Другими словами — мы получаем '
          'открытую конкуренцию инструментов разработки и браузеров, что '
          'непрерывно будет двигать всё это вперёд, принося конечному '
          'пользователю отличный выбор. Кроме того, такое разделение позволяет '
          'командам разработчиков инструментария и браузеров работать '
          'параллельно и независимо.\n'
          '\r\n'
          'Новый проект на стороне инструментарий WebAssembly, о котором я '
          'хочу сегодня рассказать, называется Binaryen. Binaryen это '
          'библиотека для поддержки WebAssembly в компиляторах, написанная на '
          'С++. Если вы лично не работаете над компилятором WebAssembly, то '
          'вам, вероятно, не нужно напрямую знать что-либо о Binaryen. Если вы '
          'используете какой-нибудь компилятор WebAssembly, то он, возможно, '
          'под капотом использует Binaryen — мы рассмотрим примеры ниже.',
  'full_version': 'habr.com/ru/company/infopulse/blog/273957/',
  'id': '273957',
  'published': '24  декабря  2015 в 15:23',
  'title': 'Компилируем С\\С++ код в WebAssembly'},
 {'author': 'spmbt',
  'body': '(Прим. перев.: технологии asm.js и WebAssembly ещё не вышли в '
          'практическую плоскость, о них регулярно идут сдержанные сигналы с '
          'самых верхов Олимпа разработки веб-технологий (Mozilla, Microsoft, '
          'Google), но многие об их состоянии знают мало. Значит, самое время '
          '— узнать о них сейчас.\n'
          '\r\n'
          'Представлено интервью Брендана Айка, сделанное 31 марта 2017 года '
          'Оно — на 1.5 часа, но 2-я половина — про проект браузера Brave, не '
          'относится к компиляторам JS), создателя Javascript и журналистов из '
          'SE Daily.',
  'full_version': 'habr.com/ru/post/326276/',
  'id': '326276',
  'published': '12  апреля  2017 в 00:07',
  'title': 'Раскрываем тему WebAssembly с Бренданом Айком'},
 {'author': 'nzeemin',
  'body': 'Эта статья основана на моём выступлении на ITSubbotnik, прошедшем в '
          'Рязани 14 октября 2017 года. На русском пока что довольно мало '
          'материала на эту тему, надеюсь что статья будет вам полезна.\n'
          'Disclaimer: Автор не является экспертом ни в WebAssembly, ни в '
          'JavaScript. Данная статья есть компиляция мыслей и идей, полученных '
          'из выступлений других людей на данную тему, плюс эпизодического '
          'опыта изучения WebAssembly в течение нескольких месяцев.',
  'full_version': 'habr.com/ru/post/342180/',
  'id': '342180',
  'published': '12  ноября  2017 в 20:43',
  'title': 'Знакомство с WebAssembly'},
 {'author': 'AndreyNagih',
  'body': 'Анонс WebAssembly состоялся в 2015-м — но сейчас, спустя годы, всё '
          'ещё немногие могут похвастаться им в продакшне. Тем ценнее '
          'материалы о подобном опыте: информация из первых рук о том, каково '
          'с этим жить на практике, пока что в дефиците.\n'
          '\r\n'
          'На конференции HolyJS доклад об опыте использования WebAssembly '
          'получил высокие оценки зрителей, и теперь специально для Хабра '
          'подготовлена текстовая версия этого доклада (видеозапись также '
          'приложена).',
  'full_version': 'habr.com/ru/company/jugru/blog/441140/',
  'id': '441140',
  'published': '21  февраля  2019 в 16:08',
  'title': 'Разработка под WebAssembly: реальные грабли и примеры'},
 {'author': 'm1rko',
  'body': '27 марта мы в Mozilla объявили о начале стандартизации WASI, '
          'системного интерфейса WebAssembly (WebAssembly system interface).\n'
          '\n'
          'Зачем: разработчики начали применять WebAssembly за пределам '
          'браузера, потому что WASM обеспечивает быстрый, масштабируемый, '
          'безопасный способ запуска одинакового кода на всех машинах. Но у '
          'нас пока нет прочного фундамента для такой разработки. Вне браузера '
          'нужен некий способ общения с системой, то есть системный интерфейс. '
          'А у платформы WebAssembly его пока нет.\n'
          '\n'
          'Что: WebAssembly — это ассемблер для концептуальной, а не '
          'физической машины. Он работает на различных архитектурах, поэтому и '
          'системный интерфейс нужен для концептуальной ОС, чтобы работать на '
          'разных операционных системах.\n'
          '\r\n'
          'Вот что такое WASI: это системный интерфейс для платформы '
          'WebAssembly.',
  'full_version': 'habr.com/ru/post/446764/',
  'id': '446764',
  'published': '4  апреля  2019 в 16:05',
  'title': 'Стандарт WASI: запуск WebAssembly за пределами веба'},
 {'author': 'sergeyZ',
  'body': 'ASP.NET Core Blazor — это разработанная Microsoft веб-платформа, '
          'предназначенная для запуска на стороне клиента в браузере на основе '
          'WebAssembly (Blazor WebAssembly) или на стороне сервера в ASP.NET '
          'Core (Blazor Server), но две эти модели нельзя использовать '
          'одновременно. Подробнее о моделях размещения написано в '
          'документации.\n'
          'В статье я расскажу о том, как\n'
          '\n'
          'запустить Server и WebAssembly одновременно в одном приложении,\n'
          'переключаться с Server на WebAssembly без перезагрузки приложения,\n'
          'реализовать универсальный механизм аутентификации,\n'
          'синхронизировать состояние Server и WebAssembly с помощью gRPC.\n'
          '\n'
          'TL;DR:\n'
          '\n'
          'Gif с демонстрацией полученного результата\n'
          '\n'
          '\n'
          'Пример доступен на github.',
  'full_version': 'habr.com/ru/post/546414/',
  'id': '546414',
  'published': '11  марта   в 04:05',
  'title': 'Blazor: Server и WebAssembly одновременно в одном приложении'},
 {'author': 'greebn9k',
  'body': 'Веб ожидает большое будущее.\n'
          'Вчера Брендан Айк “взорвал” сообщество веб-разработки: веб получит '
          'новый низкоуровневый бинарный компилируемый формат, который будет '
          'работать гораздо лучше, чем JavaScript.Google, Microsoft, Mozilla, '
          'а также несколько независимых специалистов работают над новым '
          'проектом в W3C WebAssembly Community Group, и то, над чем они '
          'работают, совсем не маленькая вещь.',
  'full_version': 'habr.com/ru/post/261205/',
  'id': '261205',
  'published': '26  июня  2015 в 13:04',
  'title': 'WebAssembly: начало новой эры'},
 {'author': 'ru_vds',
  'body': 'Если вы – из тех программистов, которые в новогоднюю ночь пообещали '
          'себе писать более быстрый код, сегодня у вас есть шанс это обещание '
          'выполнить. Мы поговорим о том, как ускорить работу веб-решений с '
          'использованием технологии WebAssembly (сокращённо её называют '
          'wasm). Технология это очень молодая, сейчас – пора её становления, '
          'однако, она вполне может оказать серьёзное влияние на будущее '
          'разработки для интернета.\n'
          '\n'
          '\r\n'
          'Здесь я расскажу о том, как создавать модули WebAssembly, как с '
          'ними работать, как вызывать их из клиентского кода в браузере так, '
          'будто это модули, написанные на JS. Мы рассмотрим два набора '
          'реализаций алгоритма поиска чисел Фибоначчи. Один из них '
          'представлен обычными JavaScript-функциями, второй – написан на C и '
          'преобразован в модуль WebAssembly. Это позволит сравнить '
          'производительность wasm и JS при решении схожих задач.',
  'full_version': 'habr.com/ru/company/ruvds/blog/319834/',
  'id': '319834',
  'published': '18  января  2017 в 12:59',
  'title': 'WebAssembly – путь к новым горизонтам производительности'},
 {'author': 'nzeemin',
  'body': 'Эта статья основана на моём выступлении на конференции ITSubbotnik, '
          'прошедшем 2 ноября 2019 года в Москве.\n'
          'Вообще я бэкенд программист, но меня заинтересовала эта технология, '
          'она позволяет использовать мои знания бэкенда на фронте.\n'
          'Проблема\n'
          'Начнём с проблемы, которая решается этой (относительно новой) '
          'технологией. Проблема эта — быстро исполнять код в браузере. Быстро '
          '— это значит, «быстрее чем JavaScript», в идеале настолько быстро, '
          'насколько позволяет имеющийся у нас процессор.',
  'full_version': 'habr.com/ru/post/475778/',
  'id': '475778',
  'published': '14  ноября  2019 в 03:00',
  'title': 'WebAssembly: что и как'},
 {'author': 'm1rko',
  'body': 'В последней статье по WebAssembly я сделал следующее утверждение:\n'
          'Некоторые сравнивают WebAssembly с Java-апплетами. В определённом '
          'смысле они правы, но с другой стороны сильно ошибаются. Как-нибудь '
          'я напишу статью о различиях, но пока поговорим о сходстве. В '
          'некотором смысле WebAssembly\xa0— иной способ выполнения того, для '
          'чего предназначалась JVM: это обычная виртуальная машина для '
          'кроссплатформенного ПО. Многие люди выразили заинтересованность в '
          'этой теме, так что давайте рассмотрим её подробнее! В этой статье '
          'сравним WebAssembly с тремя технологиями: Flash, Java-апплеты и '
          'немножко с PNaCL. Кроме того, статья сосредоточиться на '
          'использовании в вебе, хотя раньше мы рассматривали варианты '
          'использования WebAssembly в офлайне. Но о таком сравнении поговорим '
          'позже. Наконец, эта статья похожа на поедание тапаса [испанская '
          'закуска из множества разных компонентов — прим. пер.], здесь куча '
          'маленьких разделов. Мне кажется, она слегка коротковата, но в то же '
          'время я пытаюсь вести блог, а если продолжать её расширять, то это '
          'займёт вечность, так что извините.',
  'full_version': 'habr.com/ru/post/418653/',
  'id': '418653',
  'published': '30  июля  2018 в 20:10',
  'title': 'WebAssembly\xa0— это возвращение апплетов Java и Flash?'},
 {'author': 'ru_vds',
  'body': 'Сегодня мы представляем вам шестую часть серии материалов, которые '
          'посвящены особенностям работы всего того, что связано с JavaScript. '
          'Здесь мы поговорим о WebAssembly. А именно, детально проанализируем '
          'эту технологию, рассмотрим особенности её работы, а так же то, как '
          'она соотносится с обычным JavaScript в плане производительности. '
          'Речь пойдёт о времени загрузки кода, о скорости выполнения '
          'программ, о сборке мусора, об использовании памяти, о доступе к API '
          'платформы, об отладке, о многопоточности и о переносимости '
          'WebAssembly-кода. Эта технология, хотя и находится сейчас в самом '
          'начале своего развития, уже начала менять взгляды на разработку '
          'веб-приложений. Если разработчику нужна высочайшая '
          'производительность браузерного кода, ему просто необходимо '
          'познакомиться с WebAssembly.',
  'full_version': 'habr.com/ru/company/ruvds/blog/343568/',
  'id': '343568',
  'published': '30  ноября  2017 в 14:21',
  'title': 'Как работает JS: особенности и сфера применения WebAssembly'},
 {'author': 'SBKarr',
  'body': 'Представлять WebAssembly не нужно — поддержка уже есть в '
          'современных браузерах. Но технология годится не только для них.\n'
          'WebAssembly — кроссплатформенный байткод. Значит, этот байткод '
          'можно запустить на любой платформе, где есть его виртуальная '
          'машина. И для этого вовсе не нужен браузер и Javascript-движок.\n'
          'Далее — проверка концепции на прочность, инструментарий и первый '
          'скриптовый модуль.',
  'full_version': 'habr.com/ru/post/344246/',
  'id': '344246',
  'published': '8  декабря  2017 в 19:47',
  'title': 'Скриптуем на WebAssembly, или WebAssembly без Web'},
 {'author': 'ru_vds',
  'body': 'WebAssembly (wasm) — это переносимый бинарный формат инструкций. '
          'Один и тот же код wasm-код может выполняться в любой среде. Для '
          'того чтобы поддержать данное утверждение, каждый язык, платформа и '
          'система должны быть в состоянии выполнять такой код, делая это как '
          'можно быстрее и безопаснее.',
  'full_version': 'habr.com/ru/company/ruvds/blog/454518/',
  'id': '454518',
  'published': '4  июня  2019 в 12:30',
  'title': 'Wasmer: самая быстрая Go-библиотека для выполнения '
           'WebAssembly-кода'},
 {'author': 'sahsAGU',
  'body': 'Привет, Хабр! Я рад сообщить, что Blazor WebAssembly теперь '
          'официально выпущена и доступна для всех. Это полнофункциональный и '
          'поддерживаемый выпуск Blazor WebAssembly, готовый к использованию в '
          'продакшене. Фулл-стак веб-разработка с .NET! Подробности под катом.',
  'full_version': 'habr.com/ru/company/microsoft/blog/503596/',
  'id': '503596',
  'published': '26  мая  2020 в 13:00',
  'title': 'Веб-разработка с .NET: Представляем Blazor WebAssembly 3.2.0'},
 {'author': 'owlofmacloud',
  'body': 'Чтобы повысить производительность web-приложений, используйте '
          'WebAssembly в связке с AssemblyScript, чтобы переписать критически '
          'важные для производительности компоненты web-приложения, написанные '
          'на JavaScript. «И это действительно поможет?», — спросите вы.\n'
          '\r\n'
          'К сожалению, на этот вопрос нет чёткого ответа. Всё зависит от '
          'того, как вы будете их использовать. Вариантов много: в одних '
          'случаях ответ будет отрицательный, в других — положительный. В '
          'одной ситуации лучше выбрать JavaScript вместо AssemblyScript, а в '
          'другой — наоборот. На это влияет множество различных условий.\n'
          '\r\n'
          'В данной статье мы проанализируем эти условия, предложим ряд '
          'решений и проверим их на нескольких тестовых примерах кода.\n'
          '\n'
          'Кто я такой и почему занимаюсь этой темой?\xa0\r\n'
          '(Данный раздел можете пропустить, это несущественно для понимания '
          'дальнейшего материала).\n'
          '\r\n'
          'Мне по-настоящему нравится язык AssemblyScript. Я даже в какой-то '
          'момент начал помогать разработчикам финансово. У них небольшая '
          'команда, в которой каждый серьёзно увлечён этим проектом. '
          'AssemblyScript — очень молодой язык, похожий на TypeScript и '
          'способный компилироваться в WebAssembly (Wasm). Именно в этом и '
          'заключается одно из его преимуществ. Раньше, чтобы использовать '
          'Wasm, web-разработчик должен был учить чуждые ему языки типа С, '
          'C++, C#, Go или Rust, так как в WebAssembly изначально могли '
          'компилироваться именно такие высокоуровневые языки со статической '
          'типизацией.\xa0\n'
          '\r\n'
          'Хотя AssemblyScript (ASC) и похож на TypeScript (TS), он не связан '
          'с этим языком и не\xa0 компилируется в JS. Схожесть в синтаксисе и '
          'семантике нужна, чтобы облегчить процесс «портирования» с TS на '
          'ASC. Такое портирование в основном сводится к добавлению аннотаций '
          'типов.',
  'full_version': 'habr.com/ru/company/macloud/blog/554860/',
  'id': '554860',
  'published': '28  апреля   в 14:13',
  'title': 'Оптимизируем производительность: JavaScript (V8) vs AssemblyScript '
           '(WebAssembly)'},
 {'author': 'Bright_Translate',
  'body': 'Поддержка многопоточности стала одним из важнейших апгрейдов '
          'производительности в WebAssembly. Она позволяет выполнять либо '
          'части кода на разных ядрах параллельно, либо один код для '
          'независимых элементов входных данных, масштабируя его на '
          'максимально доступное пользователю число ядер. Все это значительно '
          'сокращает общее время выполнения.\n'
          '\r\n'
          'В этой статье вы узнаете, как использовать потоки WebAssembly для '
          'переноса многопоточных приложений, написанных на языках C, C++ и '
          'Rust, в веб-среду.',
  'full_version': 'habr.com/ru/company/ruvds/blog/569578/',
  'id': '569578',
  'published': '5  августа   в 16:01',
  'title': 'Использование потоков WebAssembly из C, C++ и Rust'},
 {'author': 'tangro',
  'body': 'Когда я впервые услышал о технологии WebAssembly  — она сразу '
          'показалось мне крутой вещью и мне сразу захотелось попробовать её в '
          'деле. От первого желания, до чего-то работающего мне, однако, '
          'пришлось потратить немало времени и порой испытать кое-какие '
          'разочарования. Для того, чтобы сохранить ваше время и ваши нервы, '
          'если вам захочется повторить тот же путь, и написана данная '
          'статья. \n'
          '\n'
          '\n'
          'Предупреждение читателю\r\n'
          'Эта статья написана 24-го июня 2016-го года. Поскольку WebAssembly '
          'очень молодая и динамично развивающаяся технология, со временем '
          'многие описанные в данной статье вещи устареют или полностью '
          'изменятся — учитывайте это.\n'
          '\r\n'
          'А теперь поехали.\n'
          '\n'
          'Что такое WebAssembly?\r\n'
          'Официальная документация говорит следующее: «WebAssembly или wasm '
          'это новый портабельный, эффективный по размеру и скорости загрузки '
          'формат компиляции для веба». Эм-м-м-м… Что? Формат чего? Текстовый '
          'или бинарный? Да, это откровенно плохое описание. Так что убирайте '
          'уже ваши баззворд-бинго карточки и я, на основе моего опыта, дам '
          'своё определение: \n'
          '\r\n'
          '«WebAssembly или wasm это спецификация байткода для написания '
          'производительных, браузеро-независимых компонентов для веба». Это '
          'определение, тоже, конечно, не вершина эпистолярного жанра, но я '
          'попробую его дополнить. WebAssembly позволяет повысить '
          'производительность с помощью использования статически '
          'типизированных переменных, которые обходятся на рантайме '
          'значительно дешевле динамических. WebAssembly разрабатывается W3C '
          'Community Group и планируется быть внедрённым во все основные '
          'браузеры. И с этого момента на стол выкладывается киллер-фича: вы '
          'сможете писать код веб-компонентов на любом языке '
          'программирования.\n'
          '\r\n'
          'Теперь звучит лучше, неправда ли?',
  'full_version': 'habr.com/ru/company/infopulse/blog/304362/',
  'id': '304362',
  'published': '29  июня  2016 в 12:47',
  'title': 'Собираем ваш первый WebAssembly-компонент'},
 {'author': 'Antelle',
  'body': 'WebAssembly активно разрабатывается и уже достиг состояния, когда '
          'собранный модуль можно попробовать в Chrome Canary и Firefox '
          'Nightly, включив флажок в настройках.\n'
          'Сравним производительность арифметических вычислений с 64-битными '
          'числами в WebAssembly, asm.js, PNaCl и native-коде. Посмотрим на '
          'инструменты, которые есть для WebAssembly сейчас, и заглянем в '
          'недалёкое будущее.',
  'full_version': 'habr.com/ru/post/308874/',
  'id': '308874',
  'published': '31  августа  2016 в 21:39',
  'title': '64-битная арифметика в браузере и WebAssembly'},
 {'author': 'Bright_Translate',
  'body': 'По мнению многих специалистов WebAssembly представляет будущее '
          'эффективных и безопасных вычислений. В чем же конкретно выражаются '
          'его достоинства, и почему стоит отнестись к этому языку более '
          'внимательно?',
  'full_version': 'habr.com/ru/company/ruvds/blog/573928/',
  'id': '573928',
  'published': '23  августа   в 16:00',
  'title': 'Что это за зверь — WebAssembly?'},
 {'author': 'SBKarr',
  'body': 'По просьбам трудящихся, пишу о внутреннем устройстве WebAssembly.\n'
          'WebAssembly — байткод для стековой виртуальной машины. Значит, для '
          'запуска кода такой нужны интерпретатор, стек и хранилище кода. Если '
          'мы хотим взаимодействовать с внешним миром, нужен интерфейс к '
          'внешней машине, хосту. Дополнительно стандарт определяет две '
          'структуры: непрерывную память и таблицы. В версии MVP стандарта их '
          'может быть по одной штуке каждого, или не быть вовсе.\n'
          'В итоге, наш технобордель выглядит так:\n'
          '\n'
          '\n'
          'Интерпретатор\n'
          'Интерфейс к хосту\n'
          'Стек\n'
          'Хранилище кода\n'
          'Память\n'
          'Таблица\n'
          '\n'
          'Займёмся делом!',
  'full_version': 'habr.com/ru/post/345450/',
  'id': '345450',
  'published': '25  декабря  2017 в 15:32',
  'title': 'Технопорно с WebAssembly'},
 {'author': 'alizar',
  'body': 'Google, Microsoft и Mozilla на этой неделе синхронно выпустили '
          'экспериментальные билды браузеров с поддержкой WebAssembly (wasm) — '
          'эффективного низкоуровневого языка программирования, выполняющегося '
          'в браузере с производительностью гораздо выше, чем у самых '
          'современных и скоростных компиляторов JavaScript.\n'
          '\r\n'
          'Разработчик из Mozilla Люк Вагнер рассказал на Mozilla Hacks о '
          'преимуществах WebAssembly, а также сообщил о портировании на '
          'WebAssembly научно-фантастического шутера Angry Bots. Демка '
          'запускается в браузерах с поддержкой WebAssembly — это последние '
          'версии Chrome Canary, Firefox Nightly и Microsoft Edge. Скоро к ним '
          'присоединится Safari на WebKit.',
  'full_version': 'habr.com/ru/post/279429/',
  'id': '279429',
  'published': '16  марта  2016 в 15:00',
  'title': 'Три основных браузера добавили поддержку низкоуровневого бинарного '
           'формата WebAssembly'},
 {'author': 'm1rko',
  'body': 'Оба авторе: Лин Кларк — разработчик в группе Mozilla Developer '
          'Relations. Занимается JavaScript, WebAssembly, Rust и Servo, а '
          'также рисует комиксы о коде.\n'
          '\r\n'
          'Люди называют WebAssembly фактором, меняющим правила игры, потому '
          'что эта технология ускоряет выполнение кода в вебе. Некоторые из '
          'ускорений уже реализованы, а другие появятся позже.\n'
          '\r\n'
          'Одна из техник — потоковая компиляция, когда браузер компилирует '
          'код во время его загрузки. До настоящего времени эта технология '
          'рассматривалась лишь как потенциальный вариант ускорения. Но с '
          'выпуском Firefox 58 она станет реальностью.\n'
          '\r\n'
          'Firefox 58 также включает в себя двухуровневый компилятор. Новый '
          'базовый компилятор компилирует код в 10–15 раз быстрее, чем '
          'оптимизирующий компилятор.\n'
          '\r\n'
          'Вместе эти два изменения означают, что мы компилируем код быстрее, '
          'чем он поступает из сети.\n'
          '\n'
          '\n'
          '\r\n'
          'На десктопе мы компилируем 30-60 МБ кода WebAssembly в секунду. Это '
          'быстрее, чем сеть доставляет пакеты.',
  'full_version': 'habr.com/ru/post/347158/',
  'id': '347158',
  'published': '21  января  2018 в 23:53',
  'title': 'Ещё большее ускорение WebAssembly: новый потоковый и '
           'многоуровневый компилятор в Firefox'},
 {'author': 'alizar',
  'body': '3D-рендеринг демки Zen Garden в браузере Firefox 52 c поддержкой '
          'WebAssembly\n'
          '\r\n'
          'Mozilla выпустила Firefox 52, последнюю версию браузера с '
          'поддержкой операционной системы Windows\xa0XP. Сделан ряд важных '
          'изменений: упрощено подключение к хотспотам, где нужно сначала '
          'залогиниться в браузере, появились предупреждения об опасности, '
          'если страница запрашивает пароль по небезопасносму соединению (не '
          'HTTPS), исчезла поддержка плагинов NPAPI (кроме Flash, а в билде '
          'ESR останется полная поддержка), закрыто 28 уязвимостей.\n'
          '\r\n'
          'Но ничто это не сравнится с главным и фундаментальным нововведением '
          '— поддержкой низкоуровневого языка программирования WebAssembly '
          '(wasm) типа ассемблера, который называют одной из самых '
          'значительных инноваций веб-платформы за последнее десятилетие. Это '
          'то, чего не хватало JavaScript.',
  'full_version': 'habr.com/ru/post/402173/',
  'id': '402173',
  'published': '8  марта  2017 в 22:41',
  'title': 'Вышел Firefox 52 c поддержкой WebAssembly'},
 {'author': 'MaxRokatansky',
  'body': 'В последней статье мы рассказывали, как вызывать функции Rust из '
          'Node.js. Сегодня мы расскажем, как написать приложение AIaaS (англ. '
          'Artificial Intelligence as a Service\xa0— «искусственный интеллект '
          'как услуга») на базе Node.js.Большинство приложений с искусственным '
          'интеллектом сейчас разрабатываются на языке Python, а главным '
          'языком программирования для веб-разработки является JavaScript. Для '
          'того чтобы реализовать возможности ИИ в вебе, нужно обернуть '
          'алгоритмы ИИ в JavaScript, а именно в Node.js.Однако ни Python, ни '
          'JavaScript сами по себе не подходят для разработки ИИ-приложений с '
          'большим объемом вычислений. Это высокоуровневые, медленные языки со '
          'сложной средой выполнения, в которых удобство использования '
          'достигается за счет снижения производительности. Для решения этой '
          'проблемы блоки интеллектуальных вычислений в Python оборачиваются в '
          'нативные C/C++-модули. Точно так же можно сделать и в Node.js, но '
          'мы нашли решение получше\xa0— WebAssembly.Виртуальные машины '
          'WebAssembly поддерживают тесную интеграцию с Node.js и другими '
          'средами выполнения JavaScript-кода. Они отличаются высокой '
          'производительностью, безопасны с точки зрения доступа к памяти, '
          'изначально защищены и совместимы с разными операционными системами. '
          'В нашем подходе сочетаются лучшие возможности WebAssembly и '
          'нативного кода.',
  'full_version': 'habr.com/ru/company/otus/blog/530258/',
  'id': '530258',
  'published': '27  ноября  2020 в 17:33',
  'title': 'Обнаружение лиц в Node.js с использованием Rust и WebAssembly'},
 {'author': 'F0iL',
  'body': 'Про WebAssembly в наше время слышали, я думаю, практически все. '
          'Если Вы не слышали, то на Хабре есть замечательный вводный материал '
          'об этой технологии. \n'
          '\r\n'
          'Другое дело, что очень часто можно встретить комментарии вида “Ура, '
          'теперь будем писать фронтенд на C++!”, “Давайте перепишем React на '
          'Rust” и прочее, прочее, прочее…',
  'full_version': 'habr.com/ru/post/347804/',
  'id': '347804',
  'published': '31  января  2018 в 15:17',
  'title': 'WebAssembly и манипуляции DOM'},
 {'author': '2tl',
  'body': 'Google, Microsoft, Mozilla и инженеры проекта WebKit 17 июня '
          'сделали анонс, что они объединились для запуска WebAssembly, нового '
          'бинарного формата для компилирования веб-приложений.',
  'full_version': 'habr.com/ru/post/260667/',
  'id': '260667',
  'published': '19  июня  2015 в 02:34',
  'title': 'Google, Microsoft, Mozilla и другие объединились для запуска '
           'WebAssembly, нового бинарного формата для Web'},
 {'author': 'phillennium',
  'body': 'Интерес к WebAssembly велик, но пока что нечасто встретишь людей, '
          'использующих эту технологию в рабочем проекте. Разработка '
          'приложений под Smart TV — тоже «нетипичный JavaScript», когда все '
          'слышали о чём-то, но немногие лично пробовали.\n'
          '\r\n'
          'А у Андрея andreynagih Нагих есть опыт в обеих сферах: ранее он '
          'занимался Smart TV-приложениями проекта Peers.TV, а в последние '
          'месяцы так плотно знакомился с WebAssembly, что в итоге сделал '
          'доклад об этом на нашей конференции HolyJS. И в онлайн-трансляции '
          'HolyJS мы поспрашивали его и о том, и о другом.\n'
          '\r\n'
          'А теперь решили, что читателям Хабра это тоже может быть интересно, '
          'и сделали отредактированную текстовую версию интервью.',
  'full_version': 'habr.com/ru/company/jugru/blog/435976/',
  'id': '435976',
  'published': '15  января  2019 в 09:51',
  'title': 'WebAssembly в продакшне и «минное поле» Smart TV: интервью с '
           'Андреем Нагих'},
 {'author': 'Ava_perseus',
  'body': 'Привет, Хабр! Представляю вашему вниманию перевод статьи «Back To '
          'The Future With WebAssembly» автора Attila Vágó.\n'
          '\n'
          'Данный пост является переводом статьи, в которой рассказывается о '
          'свойствах WebAssemly и Emscripten. Оригинал статьи на английском '
          'языке. \n'
          'Автор статьи Аттила Ваго — senior разработчик ПО в HMH. Пишет код, '
          'блоги и штуки в интернете. Полиглот языков программирования, '
          'прагматичный деятель, со страстью к JavaScript и легкому доступу. '
          'Легко вдохновляемый и вдохновляющий человек с сильным пристрастием '
          'к вещам для ботаников, отличной еде, крафтовому пиву и Lego. '
          'Пользуется Mac. Делает зарядку в 6 утра.\n'
          '\n'
          'В 2011 году я написал свою первую независимую строку кода не на '
          'HTML (с ним я работал в 2007 году), и она была написана на том '
          'самом старом добром С, который преподавал профессор Дэвид Дж. Малан '
          'из Гарвардского университета. Он навсегда останется моим '
          'вдохновителем не только на изучение программирования, но и на '
          'программное мышление. Также запомнилось то, что приготовить '
          'бутерброд с арахисовым маслом просто для меня, однако это '
          'невероятно сложная задача для компьютера и одинаково трудная для '
          'человека, притворяющегося компьютером.',
  'full_version': None,
  'id': '453008',
  'published': '22  мая  2019 в 19:15',
  'title': 'Назад в будущее с WebAssembly'},
 {'author': 'Kilor',
  'body': 'В прошлой статье, посвященной выяснению победителя в состязании '
          'JS-парсеров строки buffers-атрибута\xa0узла плана PostgreSQL, мы '
          'дошли до факта, что самый эффективный вариант - реализовать '
          'примитивный конечный автомат и никогда не трогать регулярные '
          'выражения и любые операции над строками сложнее .charCodeAt.Такой '
          'код на тестовом нормализованном наборе показывает время порядка '
          '48ms на 6.3MB или около 130MB/s, что примерно в 11 раз быстрее '
          'наивного варианта со .split.Но всегда остается вопрос: "А еще '
          'быстрее - можно?"Чтобы приблизиться к возможностям "железа", но '
          'по-прежнему остаться в инфраструктуре JavaScript, сегодня мы '
          'научимся решать эту задачу с использованием WebAssembly и '
          'SIMD-инструкций, постаравшись по пути споткнуться обо все подводные '
          'камни.',
  'full_version': 'habr.com/ru/company/tensor/blog/544824/',
  'id': '544824',
  'published': '9  марта   в 09:35',
  'title': 'Разгоняем JS-парсер с помощью WebAssembly (часть 1: базовые '
           'возможности)'},
 {'author': 'fokus-lop',
  'body': 'В этой статье рассматривается кейс по ускорению браузерного '
          'приложения через замену вычислений JavaScript на WebAssembly.',
  'full_version': 'habr.com/ru/company/skillbox/blog/452190/',
  'id': '452190',
  'published': '16  мая  2019 в 17:43',
  'title': 'Как мы при помощи WebAssembly в 20 раз веб-приложение ускорили'},
 {'author': 'Omankit',
  'body': 'Мое мнение, что WebAssembly будущее интернета. Данная технология на '
          'текущий момент уже интегрирована в большинство современных '
          'браузерах (а точнее в их движках) на ПК и мобильных устройствах. В '
          'таких браузерах как Chrome, Edge, Firefox, и WebKit.\n'
          'В данной статье я опишу как начать разработку сайта WebAssembly в '
          'Visual Studio. Статья подойдет для тех, кто хотел бы понять, как '
          'начать разрабатывать SPA приложения без использования JavaScript, '
          'зная только asp.net mvc, c#, верстку html и css.\n'
          'На момент выхода статьи фреймворк NetCore 3 находится в стадии RC1, '
          'а Blazor имеет версию 3.0.0-preview9.19457.4. Релиз NetCore 3 '
          'запланирован на сентябрь 2019. Что относительно Blazor то его релиз '
          'обещают позднее в ноябре 2019 года, скорее всего после релиза '
          'NetCore 3.1\r\n'
          'Оглавление:\n'
          '\n'
          '\n'
          'I Установка\n'
          'II Создание проекта WebAssembly из шаблона\n'
          'III Структура решения\n'
          'IV Запуск и отладка WebAssembly blazor\n'
          'V Размеры файлов и linker\n'
          'VI Публикация и LazyLoading, библиотеки элементов\n'
          'VII Выводы',
  'full_version': 'habr.com/ru/post/468019/',
  'id': '468019',
  'published': '19  сентября  2019 в 14:08',
  'title': 'Разработка сайта на WebAssembly с помощью NetCore 3 и Blazor'},
 {'author': 'Renatk',
  'body': 'Как известно, приложения написанные на Qt, который является кросс '
          'платформенными запускаются от desktop, мобильных, интернет вещей, '
          'до микроконтроллеров.\n'
          '\r\n'
          'Один из вариантов это сборка приложения Qt в WebAssembly — которое '
          'позволит Вам запускать его в браузере у пользователя. Таким образом '
          'обновление приложения для пользователя будет заключаться в загрузке '
          'на сервер нового файла wasm.\n'
          '\r\n'
          'Чтобы легче было осуществлять деплой приложения, в рамках данной '
          'статьи давайте соберём приложение Qt в WebAssembly под Windows в '
          'командной строке.',
  'full_version': 'habr.com/ru/post/485610/',
  'id': '485610',
  'published': '27  января  2020 в 14:51',
  'title': 'Собираем приложение Qt в WebAssembly в Windows'},
 {'author': 'Kilor',
  'body': 'В первой части статьи мы исследовали скорость различных вариантов '
          'обмена информацией между JavaScript и WASM-кодом. В этом '
          'продолжении - наконец-то займемся написанием прикладного кода '
          'нашего парсера.Мы ведь теперь пишем "прямо на ассемблере" - значит, '
          'все будет супербыстро! Правда ведь?',
  'full_version': 'habr.com/ru/company/tensor/blog/545272/',
  'id': '545272',
  'published': '11  марта   в 08:45',
  'title': 'Разгоняем JS-парсер с помощью WebAssembly (часть 2: алгоритм и его '
           'оптимизации)'},
 {'author': 'valshavel',
  'body': 'Меня зовут Валерий Шавель, я из команды разработки векторного '
          'движка Яндекс.Карт. Недавно мы внедряли в движок технологию '
          'WebAssembly. Ниже я расскажу, почему мы её выбрали, какие '
          'результаты получили и как вы можете использовать эту технологию в '
          'своём проекте.',
  'full_version': 'habr.com/ru/company/yandex/blog/475382/',
  'id': '475382',
  'published': '19  ноября  2019 в 10:14',
  'title': 'Как мы внедряли WebAssembly в Яндекс.Картах и почему оставили '
           'JavaScript'},
 {'author': 'S_ILya',
  'body': 'Оскар Спенсер — один из создателей языка Grain\n'
          '\r\n'
          'Grain — язык программирования высокого уровня со строгой '
          'типизацией. Это гибридный язык, сочетающий в себе некоторые '
          'возможности функционального\xa0 (например, вывод типов, '
          'сопоставление с образцом, замыкания) и императивного '
          'программирования (например, мутабельные переменные).\n'
          '\r\n'
          'Оскар Спенсер, один из создателей языка, презентовал Grain на '
          'WebAssembly Summit 2021. Спенсер рассказал о его наиболее '
          'интересных и важных особенностях, а также подчеркнул, что Grain '
          'создан и оптимизирован специально для WebAssembly. Скомпилировать '
          'его можно только в байт-код Wasm. По крайней мере, это так на '
          'сегодняшний день.\n'
          '\r\n'
          'Вот как разработчики сформулировали миссию языка Grain:\n'
          '\n'
          'Grain стремится взять лучшее от функциональных и императивных '
          'языков программирования и донести это до широкой аудитории. Во '
          'многих языках реализованы замечательные идеи, но в конечном итоге '
          'эти языки не получили широкого распространения. Всё потому, что они '
          'слишком странные или чересчур сложные для изучения. И, '
          'следовательно, их попытки сплотить вокруг себя большое сообщество '
          'провалились. Grain должен вдохнуть новую жизнь в эти идеи и '
          'представить их в доступной форме, оставаясь простым в '
          'использовании.\r\n'
          'WebAssembly Summit — это ежегодная конференция, посвящённая всем '
          'аспектам использования и взаимодействия с Wasm. Саммит, о котором '
          'идёт речь в статье, прошёл в апреле 2021 года.',
  'full_version': None,
  'id': '561048',
  'published': '4  июня   в 15:00',
  'title': 'У AssemblyScript новый конкурент: язык Grain, созданный для '
           'WebAssembly, громко заявил о себе'},
 {'author': 'RPG18',
  'body': 'Qt Everywhere — так именуются архивы с исходниками Qt. В 5.12.0 '
          'завезут WebAssembly и WebGL стриминг и everywhere звучит уже по '
          'другому. Так и просилось что-нибудь запрототипировать. Был быстро '
          'накидан прототип чатика на веб-сокетах, что бы протестировать '
          'поддержку сети. Под катом будет инструкция по сборке и запуска '
          'проекта на WebAssembly, пример вызова JavaScript из С++.',
  'full_version': 'habr.com/ru/post/430954/',
  'id': '430954',
  'published': '26  ноября  2018 в 12:28',
  'title': 'Qt Everywhere: WebAssembly и WebGL стриминг'},
 {'author': 'Kilor',
  'body': 'В предыдущей статье мы остановились на варианте, который с помощью '
          'SWAR-хинта превращает 8 последовательных цифр в одно числовое '
          '32bit-значение. Но что если мы предположим, что все значения у нас, '
          'в основном, невелики - до 3 цифр? Тогда нам вполне достаточно '
          'использовать всего лишь 32bit-инструкции, а SWAR будет выполнен за '
          '2 операции вместо 3 - сплошной выигрыш!Давайте перепишем наш код '
          'так, чтобы первый блок из 4 символов обрабатывался '
          '32bit-инструкциями, а второй блок из 8 символов, если понадобится - '
          'уже 64bit-инструкциями.И... вместо 29ms получаем 31ms! Значит, наше '
          'предположение относительно длины чисел не оправдалось, и в первом '
          'блоке выгоднее обрабатывать сразу побольше символов.То есть больше '
          'размерность регистра - лучше? И такие регистры есть - это '
          '128-битные SSE-регистры XMM - в WebAssembly они доступны нам как '
          'переменные с типом v128 и суперскалярные операции над ними.',
  'full_version': 'habr.com/ru/company/tensor/blog/545642/',
  'id': '545642',
  'published': '12  марта   в 14:30',
  'title': 'Разгоняем JS-парсер с помощью WebAssembly (часть 3: SIMD)'},
 {'author': 'OlegSchwann',
  'body': 'Оригинал статьи.\n'
          '\r\n'
          'В феврале 2017 года член команды go Brad Fitzpatrick предложил '
          'сделать поддержку WebAssembly в языке. Спустя четыре месяца в '
          'ноябре 2017 автор GopherJS Ричард Музиол начал реализовывать идею. '
          'И, наконец, полная реализация была смержена в mаster. Разработчики '
          'получат wasm примерно в августе 2018, с версией go 1.11. В '
          'результате, стандартная библиотека берёт на себя почти все '
          'технические сложности с импортом и экспортом функций, знакомых вам, '
          'если вы уже пробовали компилировать Си в wasm. Звучит '
          'многообещающе. Давайте посмотрим, что можно сделать с первой '
          'версией.',
  'full_version': 'habr.com/ru/post/417563/',
  'id': '417563',
  'published': '18  июля  2018 в 21:20',
  'title': 'Благодаря WebAssembly можно писать Frontend на Go'},
 {'author': 'Gbdrm',
  'body': 'В предыдущей статье получилось сделать прототип игры с вопросами. '
          'Но не получилось сделать это полноценно на WebAssembly. В этот раз '
          'предлагаю конвертировать этот прототип, сделав с него полноценное '
          'WebAssembly приложение, а так же добавить к нему атрибуты '
          'большинства игр — опыт и уровни игрока. А так же простую логику — '
          'при переходе на некоторые уровни будем открывать новые навыки.\n'
          '\n'
          'Demo',
  'full_version': 'habr.com/ru/post/507620/',
  'id': '507620',
  'published': '1  июля  2020 в 00:41',
  'title': 'Игра на WebAssembly, часть 2: уровни и опыт, админка'},
 {'author': 'varanio',
  'body': 'Недавно вышла новость про то, что webassembly теперь включен в '
          'firefox 52 из коробки. А потом еще и chrome 57 подтянулся (правда, '
          'там вроде бы были какие-то баги с запуском). Я решил, что '
          'обязательно надо попробовать.\n'
          'Для тех, кто не знает, что такое webassembly краткая информация: '
          'webassembly (или wasm) — это низкоуровневый язык, который понимают '
          'браузеры, и в который можно будет скомпилировать программы, '
          'написанные на популярных языках. Это гораздо более выгодно по '
          'скорости парсинга и выполнения, чем компилировать эти языки в '
          'чистый javascript или какой-нибудь asm.js. \n'
          'Wasm задумывался в основном для c/c++, но, на удивление, уже все '
          'готово, чтобы скомпилировать программу на rust. Давайте сделаем '
          'небольшое приложение и посмотрим, что получится. Все это будем '
          'компилировать на Ubuntu. Без теоретических деталей, просто '
          '"пощупаем".',
  'full_version': 'habr.com/ru/post/325008/',
  'id': '325008',
  'published': '28  марта  2017 в 11:12',
  'title': 'Пробуем делать web-frontend на Rust (WebAssembly)'},
 {'author': 'ru_vds',
  'body': 'WebAssembly (сокр. WASM) — технология запуска предварительно '
          'скомпилированного бинарного кода в браузере на стороне клиента. '
          'Впервые была представлена в 2015 году и на текущий момент '
          'поддерживается большинством современных браузеров.\n'
          '\r\n'
          'Один из распространенный сценариев использования — предварительная '
          'обработка данных на стороне клиента перед отправкой файлов на '
          'сервер. В этой статье разберемся как это делается.',
  'full_version': 'habr.com/ru/company/ruvds/blog/520954/',
  'id': '520954',
  'published': '28  сентября  2020 в 12:41',
  'title': 'Обрабатываем данные на стороне клиента с помощью WebAssembly'},
 {'author': 'Hixon10',
  'body': 'В эту пятницу состоялся релиз Go 1.11. Ключевые вещи релиза — '
          'экспериментальная поддержка WebAssembly, а также новая концепция '
          'Модулей, которые призваны стать стандартом распространения кода.',
  'full_version': None,
  'id': '421355',
  'published': '27  августа  2018 в 06:22',
  'title': 'Go 1.11 зарелизился — WebAssembly и Нативные модули'},
 {'author': 'germn',
  'body': 'Список переведённых частей серии:\n'
          '\n'
          'Приготовления\n'
          'Компиляция с Emscripten (вы тут)\n'
          'Конвертация avi в mp4\n'
          '\n'
          'Начиная с этой части, материал будет посложнее, так что не '
          'стесняйтесь гуглить по ходу чтения, если не понимаете, что '
          'происходит.\n'
          'К тому же я постараюсь задокументировать решение возможных проблем, '
          'чтобы вы смогли скомпилировать бибилиотеку со своими настройками.\n'
          'В этой части мы разберём:\n'
          '\n'
          'Как настроить окружение для Emscripten в Docker\n'
          'Использование emconfigure и emmake\xa0\n'
          'Как решать проблемы, возникающие при компиляции FFmpeg с Emscripten',
  'full_version': 'habr.com/ru/post/473134/',
  'id': '473134',
  'published': '28  октября  2019 в 14:24',
  'title': 'Компилируем FFmpeg в WebAssembly (=ffmpeg.js): Часть 2 — '
           'Компиляция с Emscripten'},
 {'author': 'Maxchagin',
  'body': 'Всем привет! 24 августа 2018 вышла версия Go 1.11 с '
          'экспериментальной поддержкой WebAssembly (Wasm). Технология '
          'интересная и у меня сразу возникло желание поэкспериментировать. '
          'Написать "Hello World" скучно (и он кстати есть в документации), '
          'тем более тренд прошедшего лета статьи из серии "Как сделать поиск '
          'пользователей по GitHub <вставить свой любимый JS-фреймворк>"',
  'full_version': 'habr.com/ru/post/369785/',
  'id': '369785',
  'published': '6  сентября  2018 в 12:25',
  'title': 'Как сделать поиск пользователей по GitHub на WebAssembly'},
 {'author': 'germn',
  'body': 'Список переведённых частей серии:\n'
          '\n'
          'Приготовления\n'
          'Компиляция с Emscripten\n'
          'Конвертация avi в mp4 (вы тут)\n'
          '\n'
          '\n'
          'В этой части ма разберём:\n'
          '\n'
          '\n'
          'Компиляцию библиотеки FFmpeg с оптимизированными аргументами.\n'
          'Управление файловой системой Emscripten.\n'
          'Разработку ffmpeg.js v0.1.0 и конвертацию видео.',
  'full_version': 'habr.com/ru/post/473166/',
  'id': '473166',
  'published': '28  октября  2019 в 16:11',
  'title': 'Компилируем FFmpeg в WebAssembly (=ffmpeg.js): Часть 3 — '
           'Конвертация avi в mp4'},
 {'author': 'Alex_BBB',
  'body': 'В заметке описан способ динамического добавления на страницу '
          'компонентов по JSON-описанию с помощью DynamicComponent из ASP.NET '
          'Core 6.0 (в настоящее время в статусе Preview).Динамическое '
          'создание компонентов пригодится например при реализации '
          'конструктора форм:• Форма описывается JSON-ом;• Элементы (или '
          'контролы) формы не ограничены предустановленным набором. Контролы '
          'можно добавлять, в том числе подгружать из других dll-библиотек.',
  'full_version': 'habr.com/ru/post/577174/',
  'id': '577174',
  'published': '9  сентября   в 20:01',
  'title': 'Blazor WebAssembly: динамическое создание компонентов по JSON '
           'описанию'},
 {'author': 'Ontologic',
  'body': 'Технология Ontology Wasm снижает стоимость переноса смарт '
          'контрактов dApp со сложной бизнес- логикой на блокчейн, тем самым '
          'значительно обогащая dApp экосистему.\n'
          '\r\n'
          'В настоящее время Ontology Wasm одновременно поддерживает '
          'разработку как на языке Rust, так и на языке C++. Язык Rust лучше '
          'поддерживает Wasm, а сгенерированный байт-код проще, что может еще '
          'больше снизить стоимость контрактных вызовов. Итак, как '
          'использовать Rust для разработки контракта в сети Ontology?',
  'full_version': 'habr.com/ru/post/471878/',
  'id': '471878',
  'published': '25  октября  2019 в 09:06',
  'title': 'Как написать смарт контракт на WebAssembly в сети Ontology? Часть '
           '1: Rust'},
 {'author': 'germn',
  'body': 'Список переведённых частей серии:\n'
          '\n'
          'Приготовления (вы тут)\n'
          'Компиляция с Emscripten\n'
          'Конвертация avi в mp4\n'
          '\n'
          '\n'
          '\n'
          'Из этой части вы узнаете:\n'
          '\n'
          'Зачем это всё нужно\n'
          'Как скомпилировать FFmpeg в Docker\n'
          '\n'
          '\n'
          'Зачем это всё нужно\n'
          'Главные задачи у серии публикаций такие:\n'
          '\n'
          'Создать туториал по использованию Emscripten для компиляции C/C++ '
          'библиотек в JavaScript (более детальный и полезный, чем написанные '
          'ранее)\n'
          'Персональная памятка\n'
          '\n'
          'Почему FFmpeg?\n'
          'FFmpeg — это свободный проект с открытым исходным кодом, состоящий '
          'из обширного набора библиотек и программ для обработки видео, аудио '
          'и других мультимедийных файлов/трансляций. (из Википедии)\n'
          'Библиотеки JavaScript, которая предоставляла бы подобные '
          'возможности, попросту не существует. Если вы погуглите «ffmpeg.js», '
          'то найдёте несколько решений, подобных тому что мы собираемся '
          'сделать:\n'
          '\n'
          'ffmpeg.js\n'
          'videoconverter.js\n'
          '\n'
          'Эти библиотеки, конечно, можно использовать, но у них есть свои '
          'недостатки:\n'
          '\n'
          'Используемые версии как FFmpeg, так и Emscripten устарели\n'
          'Проекты не поддерживаются уже долгое время\n'
          '\n'
          'Изначально я планировал заняться поддержкой какой-нибудь из двух '
          'библиотек, но так как за годы накопилось слишком много изменений, '
          'решил сделать всё с чистого листа, попутно создав туториал по '
          'использованию Emscripten для компиляции большой C/C++ библиотеки.',
  'full_version': 'habr.com/ru/post/473098/',
  'id': '473098',
  'published': '28  октября  2019 в 10:38',
  'title': 'Компилируем FFmpeg в WebAssembly (=ffmpeg.js): Часть 1 — '
           'Приготовления'},
 {'author': 'Ontologic',
  'body': 'В этой статье мы разберем на двух примерах, как написать смарт '
          'контракт на языке C++, используя WASM на основе блокчейн сети '
          'Ontology. Сегодня, после нескольких месяцев стабильной работы в '
          'тестовом режиме, Ontology запустила WASM в основной сети, что '
          'позволяет безболезненно и с меньшими издержками переносить '
          'контракты dApp со сложной бизнес-логикой на блокчейн, тем самым '
          'значительно обогащая dApp экосистему.\n'
          '\r\n'
          'Ontology Wasm также поддерживает создание смарт контрактов на языке '
          'Rust, об этом можно почитать тут. \n'
          '\r\n'
          'Ниже рассмотрим два примера смарт-контракта: сначала напишем “Hello '
          'world!” и потом создадим виртуальные денежный конверт, который '
          'можно будет отправить другу в качестве подарка.\n'
          '\n'
          'Разработка WASM-контракта с помощью С++',
  'full_version': 'habr.com/ru/post/473784/',
  'id': '473784',
  'published': '30  октября  2019 в 12:47',
  'title': 'Как написать смарт контракт на WebAssembly в сети Ontology? Часть '
           '2: С++'},
 {'author': 'redhatrussia',
  'body': 'И вновь мы приготовили для вас много инсайтов, мероприятий, книжек '
          'и шпаргалок. Оставайтесь с нами – станьте частью DevNation!',
  'full_version': 'habr.com/ru/company/redhatrussia/blog/551496/',
  'id': '551496',
  'published': '8  апреля   в 17:55',
  'title': "Пишем 'Hello World' на WebAssembly, шпаргалка по Linux-команде "
           'sed, а также 15 самых востребованных ИТ-сертификатов года'},
 {'author': 'm1rko',
  'body': 'Компилятор\xa0— часть Emscripten. А что, если удалить все свистелки '
          'и оставить только его?\n'
          '\r\n'
          'Emscripten необходим для компиляции C/C++ в WebAssembly. Но это '
          'гораздо больше, чем просто компилятор. Цель Emscripten в том, чтобы '
          'полностью заменить ваш компилятор C/C++ и запустить в вебе код, '
          'который изначально не предназначен для Сети. Для этого Emscripten '
          'эмулирует всю операционную систему POSIX. Если программа использует '
          'fopen(), то Emscripten предоставит эмуляцию файловой системы. Если '
          'используется OpenGL, то Emscripten предоставит С-совместимый '
          'контекст GL, поддерживаемый WebGL. Это немалая работа, и немало '
          'кода, который придётся внедрить в итоговый пакет. Но можно ли '
          'просто… удалить его?',
  'full_version': 'habr.com/ru/post/454868/',
  'id': '454868',
  'published': '5  июня  2019 в 08:54',
  'title': 'Компиляция C в WebAssembly без Emscripten'},
 {'author': 'phillennium',
  'body': 'Yew — аналог React и Elm, написанный полностью на Rust и '
          'компилируемый в честный WebAssembly. В статье Денис Колодин, '
          'разработчик Yew, рассказывает о том, как можно создать фреймворк '
          'без сборщика мусора, эффективно обеспечить immutable, без '
          'необходимости копирования состояния благодаря правилам владения '
          'данными Rust, и какие есть особенности при трансляции Rust в '
          'WebAssembly.\n'
          '\n'
          '\n'
          '\n'
          'Пост подготовлен по материалам доклада Дениса на конференции HolyJS '
          '2018 Piter. Под катом — видео и текстовая расшифровка доклада.',
  'full_version': None,
  'id': '422253',
  'published': '25  сентября  2018 в 12:20',
  'title': 'Yew — Rust&WebAssembly-фреймворк для фронтенда'},
 {'author': 'm1rko',
  'body': 'С момента своего анонса технология WebAssembly сразу привлекла '
          'внимание разработчиков фронтенда. Веб-сообщество с энтузиазмом '
          'восприняло идею запустить в браузере код, написанный на других '
          'языках, кроме JavaScript. Главное, что WebAssembly гарантирует '
          'скорость намного выше, чем JavaScript. \n'
          '\r\n'
          'Наши инженеры внимательно следили за развитием стандарта. Как '
          'только поддержку WebAssembly 1.0 внедрили во всех основных '
          'браузерах, разработчики сразу захотели опробовать её.\n'
          '\r\n'
          'Но тут возникла проблема. Хотя многие приложения выигрывают от '
          'WebAssembly, но область применения технологии в электронной '
          'коммерции всё ещё примитивна. Мы не смогли сразу найти правильный '
          'вариант её использования. Было несколько предложений, но во всех '
          'вариантах JavaScript подходил лучше. Когда мы в eBay оцениваем '
          'новые технологии, то первый вопрос: «Какова потенциальная выгода '
          'для наших клиентов?» Если здесь нет ясности, мы не переходим к '
          'следующему шагу. Очень легко увлечься новой модной технологией, '
          'даже если она не имеет никакого значения для клиентов и только '
          'усложняет существующий рабочий процесс. Пользовательский опыт '
          'всегда важнее опыта разработчика. Но с WebAssembly иначе. У этой '
          'технологии огромный потенциал, просто мы не могли найти правильный '
          'вариант использования. Впрочем, в итоге всё-таки нашли.',
  'full_version': 'habr.com/ru/post/453712/',
  'id': '453712',
  'published': '27  мая  2019 в 18:57',
  'title': 'Как eBay делал сканер штрих-кодов на WebAssembly'},
 {'author': 'msgeek',
  'body': 'Today we released a new preview update for Blazor WebAssembly with '
          'a bunch of great new features and improvements.\n'
          '\r\n'
          'Here’s what’s new in this release:\n'
          '\n'
          '\n'
          'Version updated to 3.2\n'
          'Simplified startup\n'
          'Download size improvements\n'
          'Support for .NET SignalR client',
  'full_version': 'habr.com/ru/company/microsoft/blog/486444/',
  'id': '486444',
  'published': '5  февраля  2020 в 10:00',
  'title': 'Blazor WebAssembly 3.2.0 Preview 1 release now available'},
 {'author': 'sahsAGU',
  'body': 'Сегодня мы выпустили новое предварительное обновление для Blazor '
          'WebAssembly с множеством замечательных новых функций и улучшений.\n'
          '\r\n'
          'Вот что нового в этом выпуске:\n'
          '\n'
          '\n'
          'Версия обновлена до 3.2\n'
          'Упрощенный запуск\n'
          'Улучшения размера загрузки\n'
          'Поддержка клиента .NET SignalR',
  'full_version': 'habr.com/ru/company/microsoft/blog/486638/',
  'id': '486638',
  'published': '5  февраля  2020 в 10:00',
  'title': 'Blazor WebAssembly 3.2.0 Preview 1 теперь доступна'},
 {'author': 'T_12',
  'body': 'Как сделать решатель (солвер) нонограмм на Python, переписать его '
          'на Rust, чтобы запускать прямо в браузере через WebAssembly.\n'
          'TL;DR',
  'full_version': 'habr.com/ru/post/454586/',
  'id': '454586',
  'published': '3  июня  2019 в 12:23',
  'title': 'Решение японских кроссвордов c P̶y̶t̶h̶o̶̶n̶ Rust и WebAssembly'},
 {'author': 'RPG18',
  'body': 'На прошедшем C++ Russia 2018 мы рассказывали о нашем опыте перехода '
          'на WebAssembly, как наткнулись на UB и как его героически '
          'закостыляли, немного о самой технологии и как работает на разных '
          'устройствах. Под катом же будет текстовая версия всего относительно '
          'UB. Код используемых тестов доступен на GitHub.',
  'full_version': 'habr.com/ru/post/354690/',
  'id': '354690',
  'published': '9  августа  2018 в 14:01',
  'title': 'Опыт с WebAssembly или как С++ undefined behavior выстрелил в '
           'ногу'},
 {'author': 'ru_vds',
  'body': 'Современные браузеры могут намного больше, чем рендеринг '
          'веб-страниц. Это стало одной из причин появления WebAssembly. Эта '
          'технология создана в попытке вывести скорость решения сложных задач '
          'на новый уровень, построить мост между JavaScript и машинным '
          'кодом.\n'
          '\r\n'
          'WebAssembly, в теории, может позволить кому угодно писать '
          'низкоуровневый код, выполняющийся в браузере, в безопасном '
          'виртуальном окружении. И, что ещё интереснее, технология WASM '
          '(сокращение от WebAssembly) была спроектирована как цель компиляции '
          'для других языков, позволяя коду, который обычно выполняют в '
          'серверной среде (например — коду, написанному на C или на C++), '
          'компилироваться в соответствующий формат и выполняться в браузере.\n'
          '\n'
          '\n'
          '\r\n'
          'У WASM был огромный потенциал и невероятные перспективы. Что же '
          'пошло не так? Почему WASM, через 3 года после релиза, ещё не '
          'используется в каждом веб-проекте? Есть ли у WASM будущее в '
          'веб-разработке? Поищем ответы на эти вопросы.',
  'full_version': 'habr.com/ru/company/ruvds/blog/539100/',
  'id': '539100',
  'published': '29  января   в 17:32',
  'title': 'Что не так с WebAssembly?'},
 {'author': 'dbezheckov',
  'body': 'Привет хакеры, сегодня мы с вами отправимся в путешествие в мир '
          'индустриального C++ и Webassembly. Недавно мне довелось '
          'поучаствовать в портировании такой сложной и большой кодовой базы '
          'на C/C++ как SpiderMonkey на WASI платформу и я хочу поделиться с '
          'вами этим опытом.',
  'full_version': 'habr.com/ru/post/569492/',
  'id': '569492',
  'published': '26  июля   в 08:53',
  'title': 'Приключения в портировании большой C++ кодовой базы на WASI '
           'WebAssembly'},
 {'author': 'Alex_BBB',
  'body': 'Работа с периодами может быть запутанной. Представьте, что у вас '
          'бухгалтерское приложение. И вам нужно получить периоды, когда '
          'сотрудник работал по графику “2 через 2” до индексации зарплаты. '
          'При этом нужно учитывать отпуска, смены графиков работы, '
          'увольнения/восстановления, переходы в другие отделы и прочие '
          'кадровые мероприятия. Эта информация хранится в виде приказов, у '
          'которых есть “Дата начала действия” и “Дата конца”, т.е. у вас есть '
          'периоды времени, с которыми нужно производить операции.Например '
          'найти пересечение всех интервалов:',
  'full_version': 'habr.com/ru/post/547614/',
  'id': '547614',
  'published': '17  марта   в 22:31',
  'title': '“Связность” кода на примере генератора ASCII графиков, утилита для '
           'операций с интервалами и demo на Blazor WebAssembly'},
 {'author': 'phillennium',
  'body': 'До конференции HolyJS осталось совсем немного (она пройдёт в Москве '
          '10-11 декабря), сейчас в её программу вносят последние штрихи — а '
          'значит, мы можем как следует представить эту программу Хабру. Какие '
          'доклады нас ждут? Если суммировать одним словом, то '
          '«разнообразные». HolyJS никогда не ограничивалась рамками '
          '«конференции про фронтенд-фреймворки», а стремилась охватывать '
          'JS-мир во всей его широте. И в этот раз разброс очень заметен: от '
          'Node.js и GraphQL до браузерных «Героев меча и магии» и победы над '
          'квантовым компьютером с помощью WebAssembly. В результате при '
          'взгляде на программу глаза так разбегаются, что в этом хабрапосте '
          'даже не получилось разбить её на несколько тематических блоков, и '
          'пришлось просто описать все доклады поочерёдно.\n'
          '\r\n'
          'Впрочем, кое-что мы выделили отдельно: кейноуты. Конференция '
          'пройдёт в трёх залах, но каждый день будет начинаться и '
          'заканчиваться общим для всех выступлением, так что логично начать '
          'описание с этих четырёх тем от четырёх всадников '
          'JavaScript-апокалипсиса, которые слетятся в Москву из-за рубежа.',
  'full_version': 'habr.com/ru/company/jugru/blog/342938/',
  'id': '342938',
  'published': '22  ноября  2017 в 17:29',
  'title': 'Обзор программы HolyJS 2017 Moscow: от WebAssembly до Yarn'},
 {'author': 'phillennium',
  'body': 'Кто-то решает сходить на конференцию, как только её анонсируют: '
          'если уже был на ней в прошлом году и всё понравилось, то '
          'сомневаться не приходится. А кто-то принимает решение, когда готова '
          'программа конференции и можно точно понять, какие доклады хочется '
          'посетить.\n'
          '\r\n'
          'Сегодня у нас материал для вторых. В программу HolyJS 2018 Piter '
          '(19-20 мая) ещё вносят последние штрихи, но по ней уже можно '
          'сделать окончательные выводы. Самые разные темы (от особенностей '
          'TypeScript и утечек памяти при использовании RxJS до портирования '
          'компиляторов JS на процессоры Эльбрус) — рассмотрели в этом посте '
          'всё, что уже известно о докладах HolyJS.',
  'full_version': 'habr.com/ru/company/jugru/blog/354586/',
  'id': '354586',
  'published': '3  мая  2018 в 18:34',
  'title': 'Обзор докладов HolyJS 2018 Piter: от WebAssembly до Three.js'},
 {'author': 'RustLangRu',
  'body': 'Команда Rust рада сообщить о выпуске новой версии — Rust 1.54.0. '
          'Rust — это язык программирования, позволяющий каждому создавать '
          'надёжное и эффективное программное обеспечение.\n'
          'Если у вас установлена предыдущая версия Rust через rustup, то '
          'обновиться на версию языка Rust 1.54.0 все так же просто, как '
          'никогда:\n'
          'rustup update stable\n'
          'Если вы всё ещё не используете rustup, вы можете установить rustup '
          'на соответствующей странице нашего веб-сайта и ознакомиться с '
          'подробными примечаниями к выпуску 1.54.0 на GitHub.\n'
          'Что стабилизировано в 1.54.0\n'
          'Этот выпуск содержит несколько новых возможностей языка.\n'
          '\n'
          'Добавлены новые сценарии использования макросов\n'
          'Стабилизированы компиляторные вставки на платформе wasm32\n'
          'Инкрементальная компиляция по умолчанию',
  'full_version': 'habr.com/ru/post/570414/',
  'id': '570414',
  'published': '30  июля   в 09:49',
  'title': 'Rust 1.54.0: Поддержка SIMD инструкций в WebAssembly и '
           'инкрементальная компиляция снова включена по умолчанию'},
 {'author': 'RPG18',
  'body': 'Заметка задумывалась как продолжение предыдущей заметки о том, как '
          'собираем C++ креши на различных платформах включая asm.js и wasm. '
          'По количеству материала, это тянет только на заметку, а не '
          'полноценную статью, да и нужно быть наркоманом, что бы делать '
          'нативный клиент на C++, а потом засовывать его в браузер. \n'
          'Но! Мы недавно делали доклад об опыте использования wasm на '
          'cppconf. Оказалось, что наркоманов больше чем я думал, да и новость '
          'Beta for Qt for WebAssembly Technology Preview. Данная заметка '
          'может быть полезна, если вы захотите сделать отлов крешей в '
          'production окружении.\n'
          'Под катом:\n'
          '\n'
          'отлов падений в asm.js и wasm;\n'
          'как выглядит стек вызовов в Safari, Firefox, Chrome.',
  'full_version': 'habr.com/ru/post/343784/',
  'id': '343784',
  'published': '25  апреля  2018 в 11:07',
  'title': 'C++ креши в WebAssembly на разных браузерах'},
 {'author': 'maybe_elf',
  'body': 'Bytecode Alliance, который появился почти год назад, объявил о '
          'слиянии Lucet и Wasmtime. Команда Wasmtime переходит на работу в '
          'Fastly.',
  'full_version': 'habr.com/ru/news/t/525402/',
  'id': '525402',
  'published': '28  октября  2020 в 12:54',
  'title': 'Команда Wasmtime перешла в Fastly в рамках работы Bytecode '
           'Alliance'},
 {'author': 'SmartEngines',
  'body': 'Компания Smart Engines первой в России представила промышленные '
          'технологии распознавания документов в браузере, не предполагающие '
          'пересылку исходных, промежуточных или справочных данных с '
          'клиентского устройства. Новое решение подходит для персональных '
          'устройств, объектов интернета вещей (IoT) и позволяет '
          'минимизировать риск утечки изображений с паспортными данными '
          'клиентов через Интернет. Исследователи компании решили сложную '
          'научно-техническую задачу разработки алгоритмов ИИ режима реального '
          'времени для полноценного распознавания в браузере и предложили '
          'качественную и безопасную альтернативу сервисам распознавания для '
          'пользователей, разработчиков и бизнеса.',
  'full_version': 'habr.com/ru/company/smartengines/news/t/563882/',
  'id': '563882',
  'published': '21  июня   в 15:21',
  'title': 'Smart Engines предоставила безопасную альтернативу сервисам '
           'распознавания документов в Интернете'},
 {'author': 'maybe_elf',
  'body': 'В Cloudflare внедрили поддержку создания воркеров на Rust без '
          'использования JavaScript. Соответствующий код опубликован на '
          'GitHub.',
  'full_version': 'habr.com/ru/news/t/577270/',
  'id': '577270',
  'published': '10  сентября   в 13:25',
  'title': 'Cloudflare добавила поддержку Rust для создания воркеров'},
 {'author': 'northicewind',
  'body': 'Мы уже видели насколько WebAssembly быстро компилируется, ускоряет '
          'js библиотеки и генерирует более компактные бинарники. У нас даже '
          'есть общее представление как наладить взаимодействие не только '
          'между сообществами Rust и JavaScript, но и с сообществами других '
          'языков. В прошлой статье мы упоминали специальный инструмент '
          'wasm-bindgen и сейчас я бы хотел остановиться на нем более '
          'подробно.',
  'full_version': 'habr.com/ru/post/353230/',
  'id': '353230',
  'published': '10  апреля  2018 в 19:06',
  'title': 'От JavaScript к Rust и обратно: рассказ о wasm-bindgen'},
 {'author': 'and3colonel',
  'body': 'This week, NSA (National Security Agency) all of a sudden made a '
          'gift to humanity, opening sources of their software reverse '
          'engineering framework. Community of the reverse engineers and '
          'security experts with great enthusiasm started to explore the new '
          'toy. According to the feedback, it’s really amazing tool, able to '
          'compete with existing solutions, such as IDA Pro, R2 and JEB. The '
          'tool is called Ghidra and professional resources are full of '
          'impressions from researchers. Actually, they had a good reason: not '
          'every day government organizations provide access to their internal '
          'tools. Myself as a professional reverse engineer and malware '
          'analyst couldn’t pass by as well. I decided to spend a weekend or '
          'two and get a first impression of the tool. I had played a bit with '
          'disassembly and decided to check extensibility of the tool. In this '
          "series of articles, I'll explain the development of Ghidra add-on, "
          'which loads custom format, used to solve CTF task. As it’s a large '
          "framework and I've chosen quite complicated task, I’ll break the "
          'article into several parts.\n'
          '\r\n'
          'By the end of this part I hope to setup development environment and '
          'build minimal module, which will be able to recognize format of the '
          'WebAssembly file and will suggest the right disassembler to process '
          'it.',
  'full_version': 'habr.com/ru/post/443318/',
  'id': '443318',
  'published': '11  марта  2019 в 18:58',
  'title': 'Writing a wasm loader for Ghidra. Part 1: Problem statement and '
           'setting up environment'},
 {'author': 'SonicGD',
  'body': 'Сегодня команда ASP.NET анонсировала, что проект Blazor был '
          'перемещён в репозиторий организации ASP.NET. Мы начинаем стадию '
          'эксперимента, чтобы понять сможем ли мы развить Blazor в '
          'поддерживаемый продукт. Это большой шаг вперёд!\n'
          '\n'
          '\n'
          '\r\n'
          'Что такое Blazor? Это фреймворк для браузерных приложений, '
          'написанный на .NET и запускающийся с помощью WebAssembly. Он даёт '
          'вам все преимущества богатых современных одностраничных приложений '
          '(SPA), позволяя при этом использовать .NET от начала и до конца, '
          'вплоть до общего кода на сервере и клиенте. В посте с анонсом '
          'подробно описаны основные случаи применения, сроки и так далее.\n'
          '\r\n'
          'В этом посте я хочу поглубже поговорить о технических деталях для '
          'тех, кому интересно как же это работает.',
  'full_version': 'habr.com/ru/post/348660/',
  'id': '348660',
  'published': '9  февраля  2018 в 09:52',
  'title': 'Blazor: Техническое введение'},
 {'author': 'Sm1le291',
  'body': 'Всем привет! Если вы слышали о Blazor, но до сих пор не понимаете, '
          'что это такое. То вы по адресу. Это первая статья из цикла 12 '
          'статей, которая проведет вас через все круги ада весь процесс '
          'создания приложения на Blazor. В конце у нас будет готовый сайт '
          'небольшой пиццерии, вполне на уровне готовый сайтов некоторых '
          'пиццерий. Поэтому вам будет чем гордиться;)',
  'full_version': 'habr.com/ru/post/486570/',
  'id': '486570',
  'published': '2  февраля  2020 в 21:24',
  'title': 'BlazingPizza: приложение на Blazor от начала и до конца. Часть 1. '
           'Настройка среды'},
 {'author': 'tyomitch',
  'body': 'Прошлое\r\n'
          'Повествование можно начать с 1962 г., когда в Кембриджском '
          'университете началась работа над CPL («Cambridge Programming '
          'Language») — «усовершенствованным вариантом» ALGOL-60. К работе над '
          'языком подключился аспирант Мартин Ричардс; главной сложностью в '
          'реализации нового ЯП ему показалась необходимость ручного '
          'портирования компилятора для разных компьютерных платформ. В '
          'частности, когда кембриджский EDSAC-2 заменили на Atlas-2, '
          'разработчики CPL потратили много времени на портирование своего '
          'компилятора для новой платформы.\n'
          '\r\n'
          'Диссертация Мартина была посвящена «само-компилирующемуся» CPL: '
          'разработанный Мартином компилятор был написан на сильно упрощённом '
          'варианте CPL, компилятор которого несложно было написать на '
          'тогдашнем макроассемблере. Перенос CPL на новую платформу теперь '
          'можно было выполнить в два шага: \n'
          'Вручную пишем компилятор «упрощённого CPL»;\n'
          'Компилируем им компилятор «полного CPL».\n'
          '\r\n'
          'На этом Мартин не остановился, и разработал BCPL — систему для '
          'разработки переносимых компиляторов. Компилятор BCPL генерировал '
          'псевдокод, названный Мартином «OCODE».\n'
          'OCODE выглядел примерно так:\n'
          '\n'
          'OCODE\n'
          '«расшифровка» («procode»)\n'
          '\n'
          '\n'
          '\n'
          '\n'
          '94 5 L1 83 73 69 86 69\n'
          '95 4\n'
          '42 0\n'
          '42 0 40 2 14\n'
          '83\n'
          '42 0 42 1 40 2 14 83\n'
          '42 2\n'
          '40 3 42 1 15\n'
          '92\n'
          '85 L5\n'
          '90 L6\n'
          '42 1 40 4 40 2 14 83\n'
          '40 4 42 1 14 80 4 \n'
          '90 5 40 4 40 5 88 L6\n'
          '91 4\n'
          '42 2 40 3 42 1 15 92\n'
          '85 L7\n'
          '90 L8 40 4 40 2 14\n'
          '8 87 L9\n'
          '40 4 42 2 11 92\n'
          '85 L11\n'
          '90 L10\n'
          '42 0 40 6 40 2 14 83\n'
          '40 4 40 6 14 80 6\n'
          '90 L11\n'
          '40 6 40 3 22 86 L10\n'
          '91 6 90 L9\n'
          '40 4 42 1 14 80 4\n'
          '90 L7 40 4 40 5 88 L8\n'
          '91 4 97 103 0\n'
          '\n'
          '\n'
          "ENTRY 5 L1  'S' 'I' 'E' 'V' 'E'\n"
          'SAVE 4\n'
          'LN 0\n'
          'LN 0 LP 2 PLUS\n'
          'STIND\n'
          'LN 0 LN 1 LP 2 PLUS STIND\n'
          'LN 2\n'
          'LP 3 LN 1 MINUS\n'
          'STORE\n'
          'JUMP L5\n'
          'LAB L6\n'
          'LN 1 LP 4 LP 2 PLUS STIND\n'
          'LP 4 LN 1 PLUS SP 4\n'
          'LAB L5 LP 4 LP 5 ENDFOR L6\n'
          'STACK 4\n'
          'LN 2 LP 3 LN 1 MINUS STORE\n'
          'JUMP L7\n'
          'LAB L8 LP 4 LP 2 PLUS\n'
          'RV JF L9\n'
          'LP 4 LN 2 MULT STORE\n'
          'JUMP L11\n'
          'LAB L10\n'
          'LN 0 LP 6 LP 2 PLUS STIND\n'
          'LP 4 LP 6 PLUS SP 6\n'
          'LAB L11\n'
          'LP 6 LP 3 LS JT L10\n'
          'STACK 6 LAB L9\n'
          'LP 4 LN 1 PLUS SP 4\n'
          'LAB L7 LP 4 LP 5 ENDFOR L8\n'
          'STACK 4 RTRN ENDPROC 0\n'
          '\n'
          '; заголовок процедуры\r\n'
          '; стековый кадр (два параметра и две локальные переменные)\r\n'
          '; поместить на стек число 0\r\n'
          '; поместить ещё один 0, прибавить к нему 2-ой элемент стека\r\n'
          '; записать в массив на вершине стека значение под ним\r\n'
          '; всё то же самое для 1-ого элемента массива\r\n'
          '; поместить на стек число 2\r\n'
          '; вычесть единицу из значения 3-его элемента стека\r\n'
          '; записать результат в локальную переменную\r\n'
          '; перейти к метке L5\r\n'
          '; объявление метки L6\r\n'
          '; взять 4-ый элемент стека, записать в массив по этому индексу 1\r\n'
          '; прибавить к 4-ому элементу стека 1, записать результат обратно\r\n'
          '; L5: перейти к метке L6, если 4-ый элемент стека <= 5-ому\r\n'
          '; объявление, что на стеке сейчас четыре элемента\r\n'
          '; вычесть единицу из значения 3-его элемента стека\r\n'
          '; перейти к метке L7\r\n'
          '; L8: сложить 4-ый и 2-ой элементы стека\r\n'
          '; прочитать значение по этому адресу; если это 0, перейти к L9\r\n'
          '; умножить 4-ый элемент на два\r\n'
          '; перейти к метке L11\r\n'
          '; объявление метки L10\r\n'
          '; взять 6-ой элемент стека, записать в массив по этому индексу 0\r\n'
          '; прибавить к 6-ому элементу стека 4-ый, записать рез-т обратно\r\n'
          '; объявление метки L11\r\n'
          '; перейти к метке L10, если 7-ой элемент стека меньше 4-ого\r\n'
          '; на стеке сейчас шесть элементов; объявление метки L9\r\n'
          '; прибавить к 4-ому элементу стека 1, записать результат обратно\r\n'
          '; L10: перейти к L8, если 4-ый элемент стека <= 5-ому\r\n'
          '; на стеке четыре элемента; окончание процедуры\n'
          '\n'
          '\n'
          '(Для экономии места, последовательности команд записаны в одну '
          'строчку. Мартин в своём руководстве по BCPL поступает точно так '
          'же.)\n'
          '\r\n'
          'Исходный код на BCPL:\n'
          '\n'
          'LET sieve(workvec, vecsize) BE\n'
          '{\n'
          '  workvec!0 := 0\n'
          '  workvec!1 := 0\n'
          '  FOR i = 2 TO vecsize-1 DO workvec!i := 1\n'
          '  FOR i = 2 TO vecsize-1 DO\n'
          '    IF workvec!i DO\n'
          '    { LET j = 2 * i\n'
          '      WHILE j < vecsize DO\n'
          '      { workvec!j := 0\n'
          '        j := j + i\n'
          '      }\n'
          '    }\n'
          '}\n'
          'В более новых версиях OCODE добавилась поддержка чисел с плавающей '
          'точкой (соответственно, набор поддерживаемых опкодов почти '
          'удвоился), а также удалили опкод ENDFOR — вместо него генерируется '
          'пара LE JT.\n'
          '\r\n'
          'Среди «универсальных машинных языков» OCODE уникален тем, что метки '
          'в нём определяются специальными инструкциями — т.е. для '
          'интерпретации программы её нужно сначала всю загрузить в память, и '
          'найти в ней метки. — а отдельная программа, кодогенератор, '
          'превращала файл с таким псевдокодом в исполнимую программу для '
          'конечного процессора. OCODE сохранялся в виде текстового файла из '
          'десятичных чисел, разделённых пробелами и переводами строк: в то '
          'время, когда OCODE разрабатывался, привязка формата файла к '
          'конкретному размеру байта ограничивала бы переносимость такого '
          'файла.\n'
          '\n'
          'Компилятор BCPL(1) поставлялся в виде OCODE, и чтобы перенести его '
          'на новую платформу, нужно было: \n'
          'Вручную написать интерпретатор псевдокода(2) (на любом языке, хоть '
          'на Бейсике);\n'
          'Адаптировать кодогенератор,(3) написанный на BCPL, для своей '
          'платформы;\n'
          'Запустить под интерпретатором (2) компилятор BCPL (1), скормить ему '
          'кодогенератор (3), и получить на выходе исполнимый файл '
          'кодогенератора(4);\n'
          'Интерпретатор (2) нам с этого момента больше не нужен.\n'
          '\n'
          'Прогнать через кодогенератор (4) псевдокод компилятора (1), и '
          'получить на выходе исполнимый файл компилятора.\n'
          '\n'
          '\r\n'
          'Такой подход означал, что для переноса компилятора на новую '
          'платформу требуется лишь самый минимум низкоуровневого '
          'программирования; и действительно, реализация BCPL была завершена к '
          '1967 г. — раньше, чем была завершена реализация CPL, начатая на '
          'несколько лет раньше!\n'
          '\r\n'
          'Достоинства BCPL применительно к системному программированию '
          'вдохновили Кена Томпсона на создание языка Би, а тот — коллегу '
          'Кена, Денниса Ритчи, на создание Си. Именно из BCPL пошла традиция '
          'обозначать {фигурными скобками} блоки программы, и именно на BCPL '
          'была написана первая программа «Hello, World!».\n'
          '\n'
          'GET "libhdr"\n'
          '\n'
          'LET start() = VALOF\n'
          '{ writef("Hello*n")\n'
          '  RESULTIS 0\n'
          '}\n'
          'Более важная нам причина, по которой BCPL вошёл в историю: OCODE — '
          'первая универсальная «архитектура набора команд» (ISA), т.е. '
          '«виртуальная машина», не привязанная ни к какой конкретной '
          'аппаратной платформе с её особенностями. BCPL, таким образом — '
          'первый язык программирования, соответствующий парадигме «Write '
          'once, run anywhere» (WORA): программу на BCPL можно распространять '
          'в скомпилированном виде, и её можно будет запустить на любой '
          'платформе, для которой существует OCODE-кодогенератор.',
  'full_version': 'habr.com/ru/post/270379/',
  'id': '270379',
  'published': '20  ноября  2015 в 02:47',
  'title': 'Полвека «универсальным машинным языкам» (1966—2016): прошлое, '
           'настоящее, будущее'},
 {'author': 'octob3rmut3',
  'body': 'Третья и заключительная часть перевода статьи из блога сервиса '
          'Auth0 A Brief History of JavaScript. Ключевые моменты: транспайлеры '
          'и ECMAScript 2015, немного о новом процессе подготовки обновлений, '
          'чего ждать в будущем и как на него повлияют Asm.js и WebAssembly. '
          'Перевод подготовлен отделом фронтенд-разработки компании Лайв '
          'Тайпинг.\n'
          '\n'
          'Краткая история JavaScript. Часть 1\n'
          'Краткая история JavaScript. Часть 2',
  'full_version': 'habr.com/ru/company/livetyping/blog/324908/',
  'id': '324908',
  'published': '27  марта  2017 в 08:29',
  'title': 'Краткая история JavaScript. Часть 3'},
 {'author': 'atrosinenko',
  'body': 'Когда-то давно я смеха ради решил доказать обратимость процесса и '
          'научиться генерировать JavaScript (а точнее, Asm.js) из машинного '
          'кода. Для эксперимента был выбран QEMU, некоторое время спустя была '
          'написана статья на Хабр. В комментариях мне посоветовали переделать '
          'проект на WebAssembly, да и самому бросать почти законченный проект '
          'как-то не хотелось… Работа шла, но уж очень медленно, и вот, '
          'недавно в той статье появился комментарий на тему «Так и чем всё '
          'закончилось?». На мой развёрнутый ответ я услышал «Это тянет на '
          'статью». Ну, раз тянет, то будет статья. Может, кому пригодится. Из '
          'неё читатель узнает некоторые факты про устройство бекендов '
          'кодогенерации QEMU, а также как написать Just-in-Time компилятор '
          'для веб-приложения.',
  'full_version': 'habr.com/ru/post/451306/',
  'id': '451306',
  'published': '12  мая  2019 в 18:31',
  'title': 'QEMU.js: теперь по-серьёзному и с WASM'},
 {'author': 'JacobL',
  'body': 'В .NET 6 запланирована поддержка AOT компиляции для Blazor '
          'WebAssembly приложений. Давайте попробуем запустить в Preview 2 '
          'версии.Анонса и инструкций пока что нету. Поэтому и решено написать '
          'этот пост.',
  'full_version': 'habr.com/ru/post/548132/',
  'id': '548132',
  'published': '22  марта   в 08:37',
  'title': 'Ahead-of-Time компиляция и Blazor'},
 {'author': 'm1rko',
  'body': 'Статья написана Лин Кларк в сотрудничестве с командой разработчиков '
          'Rust («мы» в тексте). Можете прочитать также сообщение в '
          'официальном блоге Rust.\n'
          '\r\n'
          '6 декабря 2018 года вышла первая версия Rust 2018. В этом релизе мы '
          'сосредоточились на производительности, чтобы разработчики Rust '
          'стали работать максимально эффективно.\n'
          '\n'
          '\n'
          'Временнáя шкала показывает переход функций из бета-версии в Rust '
          '2018 и Rust 2015. Она окружена значками для инструментов и четырёх '
          'областей: WebAssembly, embedded, networking и CLI. Красный круг — '
          'эффективность разработчика — окружает всё, кроме Rust 2015 \n'
          '\r\n'
          'Но вообще непросто объяснить, что такое Rust 2018.\n'
          '\r\n'
          'Некоторые представляют его новой версией языка… примерно так и '
          'есть, но не совсем. Я говорю «не совсем», потому что здесь «новая '
          'версия» означает не то, что новые версии других языков.',
  'full_version': 'habr.com/ru/post/432564/',
  'id': '432564',
  'published': '9  декабря  2018 в 20:03',
  'title': 'Вышел Rust 2018… но что это такое?'},
 {'author': 'Raiffeisenbank',
  'body': 'Приглашаем на митап, посвященный технологии WebAssembly, который '
          'пройдет на площадке Райффайзенбанка в Нагатино 1 августа. Послушаем '
          'доклады Raiffeisen Digital, Parity Technologies и Mozilla напрямую '
          'из Сан-Франциско.',
  'full_version': 'habr.com/ru/company/raiffeisenbank/blog/460947/',
  'id': '460947',
  'published': '23  июля  2019 в 15:02',
  'title': 'WASM Meet Up 1/08'},
 {'author': 'maybe_elf',
  'body': 'Adobe напомнила, что прекратит распространение и обновление Flash '
          'Player после 31 декабря 2020 года. До этого момента компания '
          'продолжит выпускать регулярные исправления безопасности для Flash '
          'Player, поддерживать его совместимость с ОС и браузерами, а также '
          'добавлять новые функции и возможности.\n'
          '\r\n'
          'Однако после 31 декабря Adobe удалит страницы загрузки Flash Player '
          'со своего сайта, а содержимое на основе Flash будет заблокировано '
          'для запуска в Adobe Flash Player.',
  'full_version': 'habr.com/ru/news/t/506898/',
  'id': '506898',
  'published': '16  июня  2020 в 13:17',
  'title': 'Flash Player будет удален с сайта Adobe в декабре'},
 {'author': 'ozkriff',
  'body': 'Предлагаю вашему вниманию субъективную подборку ржавых новостей за '
          'январь. В этой подборке: Rust 1.32, уход Стива Клабника и Ника '
          'Камерона, киш от Cloudflare, устройство rust-analyzer и страничной '
          'памяти, поиски GUI и async, Oxydyze конференция для встроенщиков.\n'
          '\n'
          'Rust 1.32\n'
          'Вышел Rust 1.32. По сравнению с масштабным прошлым выпуском, на '
          'котором было сконцентрировано множество сил всего сообщества, тут '
          'серьезных нововведений не очень много:\n'
          '\n'
          'Новый вспомогательный макрос для отладки dbg!;\n'
          'По умолчанию убран jemalloc.\n'
          'Стабилизированы "единообразные пути" ("uniform paths")\n'
          '\n'
          'Подробности в переводе новости.\n'
          'Стив Клабник и Ник Камерон уходят из Mozilla\n'
          '\n'
          'Печальные новости: Стив Клабник и Ник "nrc" Камерон покидают '
          'Мозиллу.',
  'full_version': 'habr.com/ru/post/439354/',
  'id': '439354',
  'published': '7  февраля  2019 в 13:54',
  'title': 'Rust новости #5 (январь 2019)'},
 {'author': 'kate_shlyakhova',
  'body': 'Кто согласен, что современный фронтенд — это сложно, поднимите '
          'руки! Ради чего мы мучаемся с настройкой Webpack? Почему реализация '
          'SSR требует писать столько кода, и нужен ли он нам вообще такой '
          'ценой? Кто виноват и что мы, как разработчики, можем сделать?\n'
          '\r\n'
          'Мы стараемся ответить на эти и сотни других вопросов в секции '
          'Frontend. И год от года темы становятся все разнообразнее и '
          'хардкорнее. А основной лейтмотив секции — эксперименты. \r\n'
          'Смотрите под катом, кто над чем экспериментировал в прошлом году, и '
          'что будут рассказывать и показывать в этом',
  'full_version': None,
  'id': '490976',
  'published': '4  марта  2020 в 11:25',
  'title': 'Секция Frontend на DUMP2020: вангуем, что снова будет аншлаг. Топ '
           'докладов прошлого года и темы этого'},
 {'author': 'JaneWay',
  'body': 'Полина Гуртовая — frontend-разработчик уже более 5ти лет, работает '
          'в компании Evil Martians. Она не только прекрасный специалист, но и '
          'член программного комитета секции Frontend на конференции DUMP '
          '2020, а еще спикер секции этого же года.\n'
          '\n'
          '\n'
          'Мы пообщались с Полиной и задали ей несколько, как нам показалось, '
          'важных вопросов о будущем и настоящем Frontend`а, спросили ее '
          'мнение о трендах и тенденциях направления.\n'
          'Вот что отвечает «злая марсианка» :)',
  'full_version': 'habr.com/ru/company/it_people/blog/498136/',
  'id': '498136',
  'published': '21  апреля  2020 в 10:41',
  'title': 'Беседа с Полиной Гуртовой о будущем и настоящем Frontend`а. '
           'Организаторы DUMP 2020 задают несколько важных вопросов'},
 {'author': 'm1rko',
  'body': 'Видеоконференции занимают всё большее место в работе и личной жизни '
          'людей. Чем лучше организован процесс с точки обработки видео и '
          'приватности, тем меньше отвлекается внимание человека от самой '
          'конференции. В рамках этой задачи мы недавно разработали фильтры '
          'размытия и замены фона в Google Meet. Они задействуют машинное '
          'обучение (ML) для лучшего выделения участников независимо от их '
          'окружения. В то время как другие решения требуют установки '
          'дополнительного программного обеспечения, функции Meet основаны на '
          'передовых технологиях Web ML, построенных с помощью MediaPipe, и '
          'работают непосредственно в вашем браузере\xa0— никаких '
          'дополнительных шагов не требуется. Одной из ключевых целей при '
          'разработке этих функций было обеспечение производительности в '
          'реальном времени в браузере почти на всех современных устройствах, '
          'чего мы достигли, объединив эффективные модели ML на устройстве, '
          'рендеринг на основе WebGL и вывод ML на веб-стеке с помощью XNNPACK '
          'и TFLite.',
  'full_version': 'habr.com/ru/post/527124/',
  'id': '527124',
  'published': '9  ноября  2020 в 18:14',
  'title': 'Размытие фона в Google Meet с расчётом ML в браузере'},
 {'author': 'artschedrov',
  'body': '17 марта 2021 был опубликован релиз девятой версии движка V8. Этот '
          'пост - краткое описание того что вошло в список изменений релиза.',
  'full_version': 'habr.com/ru/post/555420/',
  'id': '555420',
  'published': '1  мая   в 18:48',
  'title': 'Что вошло в релиз движка V8 версии 9.0'},
 {'author': 'Plarium',
  'body': '2015 год выдался богатым на нововведения, связанные с улучшениями '
          'веб-платформы. Аксель Рошмайер рассматривает 6 технологий, которые '
          'ему кажутся наиболее интересными:\n'
          '\r\n'
          '1. Electron;\r\n'
          '2. React Native;\r\n'
          '3. Прогрессивные веб-приложения;\r\n'
          '4. Visual Studio Code;\r\n'
          '5. Rollup;\r\n'
          '6. WebAssembly.',
  'full_version': 'habr.com/ru/company/plarium/blog/277485/',
  'id': '277485',
  'published': '18  февраля  2016 в 15:25',
  'title': '6 впечатляющих веб-технологий 2015 года'},
 {'author': 'GRaAL',
  'body': 'Однажды я готовился к Ludum Dare и сделал простую игру, где '
          'использовал пиксельные шейдеры (других в движок Phaser не '
          'завезли). \n'
          'Что такое шейдеры?Шейдеры — это программы на си-подобном языке '
          'GLSL, которые выполняются на видеокарте. Есть два вида шейдеров, в '
          'этой статье речь идет про пиксельные (они же “фрагментные”, '
          'fragment shaders), которые очень грубо можно представить в таком '
          'виде:\n'
          'color = pixelShader(x, y, ...other attributes)\n'
          'Т.е. шейдер выполняется для каждого пикселя выводимого изображения, '
          'определяя или уточняя его цвет.\r\n'
          'Вводную можно почитать на другой статье на хабре — '
          'https://habr.com/post/333002/ \n'
          'Потестировав, кинул ссылку другу, и получил от него вот такой '
          'скриншот с вопросом "а это нормально?"\n'
          '\n'
          'Нет, это было ненормально. Посмотрев внимательно код шейдера, я '
          'обнаружил ошибку в вычислениях:\n'
          'if (t < M) {\n'
          '    realColor = mix(color1,color2, pow(1. - t / R1, 0.5));\n'
          '}\n'
          'Т.к. константа R1 была меньше чем M, то в некоторых случаях в '
          'первом аргументе pow получалось число меньше нуля. Квадратный '
          'корень из отрицательного числа — штука загадочная, по крайней мере '
          'для стандарта GLSL. Мою видеокарту ничего не смутило, и она как-то '
          'выпуталась из этого положения (похоже, вернув из pow 0), а вот у '
          'друга она оказалась более разборчивой.\n'
          'И тут я задумался: а могу ли я избежать таких проблем в будущем? От '
          'ошибок никто не застрахован, особенно таких, которые не '
          'воспроизводятся локально. Юнит-тесты на GLSL не напишешь. В то же '
          'время преобразования внутри шейдера довольно простые — умножения, '
          'деления, синусы, косинусы… Неужели нельзя отследить значения каждой '
          'переменной и убедиться, что ни при каких условиях не происходит '
          'выхода за допустимые границы значений?\n'
          'Так я решил попробовать сделать статический анализ для GLSL. Что из '
          'этого получилось — можно прочитать под катом. \n'
          'Сразу предупрежу: какого-то законченного продукта получить не '
          'удалось, только учебный прототип.',
  'full_version': 'habr.com/ru/post/428027/',
  'id': '428027',
  'published': '30  октября  2018 в 00:28',
  'title': 'Как я попробовал сделать статический анализатор GLSL (и что пошло '
           'не так)'},
 {'author': 'alizar',
  'body': 'Автор uBlock Origin и uMatrix Реймонд Хилл обновил памятку, почему '
          'расширение uBlock Origin наиболее эффективно работает в браузере '
          'Firefox. Некоторые технические детали относятся не только к uBO, но '
          'и к другим блокировщикам рекламы. \n'
          '\r\n'
          'Реймонд Хилл называет несколько основных факторов: более '
          'эффективное вскрытие маскировки CNAME, HTML-фильтрация, поддержка '
          'WebAssembly, более корректная процедура запуска браузера, сжатие '
          'LZ4 и надёжно отключённый префетчинг ресурсов. Всё это есть в '
          'Firefox, но отсутствует или глючит в браузерах на основе Chromium.',
  'full_version': 'habr.com/ru/company/vdsina/blog/553114/',
  'id': '553114',
  'published': '22  апреля   в 09:30',
  'title': 'Почему uBlock Origin лучше работает в Firefox'},
 {'author': 'GeekBrains',
  'body': 'Представители КРОК, Traffic Inspector, WebMoney Transfer и Softline '
          'рассказали, что принес 2015-й год в сферу веб-разработки. Эксперты '
          'перечислили важнейшие события индустрии и отметили основные тренды '
          'уходящего года.\n'
          '\n'
          '\n'
          '\n'
          'Ключевые события и тренды\r\n'
          '2015-й – это год утверждения стандарта HTTP/2 (предыдущая версия '
          'протокола была принята в 1999). Это год массового перехода на '
          'стандарт HTML-5 с устаревшего Flash, который уже не поддерживается '
          'большинством современных браузеров. Это год появления WebAssembly, '
          'который в дальнейшем позволит перенести требовательные к '
          'производительности приложения в Web, что по мнению Сергея Дорогина, '
          'ведущего инженера-разработчика Департамента информационных '
          'технологий компании КРОК, означает “начало нового мира”.\n'
          '\r\n'
          'Большинство тенденций уходящего года в сфере веб-дизайна, связаны с '
          'ростом популярности гаджетов и распространением мобильного '
          'интернета. Среди них такие как использование адаптивной верстки '
          'вместо создания отдельной мобильной версии сайта. Один из основных '
          'трендов – минималистичный дизайн, заданный Apple, помимо этого '
          'эксперты пророчат долгоиграющую популярность материальному дизайну '
          'от Google.',
  'full_version': 'habr.com/ru/company/geekbrains/blog/273171/',
  'id': '273171',
  'published': '15  декабря  2015 в 14:36',
  'title': 'Итоги 2015: веб-разработка'},
 {'author': 'alizar',
  'body': 'Всё бóльшую популярность у злоумышленников получает партнёрская '
          'программа Coinhive по майнингу криптовалюты в браузерах '
          'пользователей (и другие JS-майнеры). Ничего не подозревающие юзеры '
          'заходят на сайт — и не обращают внимания, что у них резко '
          'возрастает нагрузка на CPU (Coinhive майнит Monero на алгоритме '
          'CryptoNight, который создаёт большой блок в памяти и предотвращает '
          'внутренний параллелизм, поэтому майнинг исключает использование '
          'ASIC и наиболее эффективен именно на CPU).\n'
          '\r\n'
          'Злоумышленники продолжают взламывать сайты и размещать скрипты для '
          'майнинга. То же самое продолжается с расширениями для браузеров. '
          'Недавно они внедрили майнер CryptoLoot даже в скрипт '
          'CookieScript.info, который помогает другим сайтам показывать '
          'предупреждение об использование кукисов по требованию Евросоюза — '
          'это самый популярный бесплатный сервис такого рода, его используют '
          'тысячи других сайтов, иначе им грозит штраф от Евросоюза до $500\xa0'
          '000.\n'
          '\r\n'
          'На деятельность злоумышленников можно было смотреть с усмешкой: ну '
          'сколько они там сгенерируют за две минуты, которые пользователь '
          'проводит на сайте? Эфемерная природа майнинга в браузере оставалась '
          'главным недостатком такого рода зловредов. Но специалисты '
          'Malwarebytes Labs отмечают, что владельцы «майнинг-ботнетов», к '
          'сожалению, сумели устранить этот недостаток. Теперь майнинг на '
          'компьютерах пользователей продолжается и после того, как они '
          'покинули заражённый сайт. И даже после закрытия браузера.',
  'full_version': 'habr.com/ru/post/408525/',
  'id': '408525',
  'published': '30  ноября  2017 в 17:56',
  'title': 'Сайты-майнеры научились прятать браузер на компьютерах '
           'пользователей'},
 {'author': 'WizardBox',
  'body': 'Когда изменения происходят постепенно, шаг за шагом, порой бывает '
          'трудно заметить насколько они драматичны и всеобъемлющи. Казалось '
          'бы всего несколько лет назад web платформа проигрывала нативным '
          'приложением практически по всем фронтам, и пропасть между тем, что '
          'можно было сделать в браузере, и тем, что было доступно '
          'приложениями, загружаемым из магазинов, таких как Apple App Store '
          'или Google Play Store, была ужасающе огромной. Одним из '
          'свидетельств этой пропасти является то, что в 2007 году web по '
          'факту был основной платформой разработки приложений для первого '
          'iPhone, но эта платформа явно не взлетела. App Store же появился '
          'только год спустя со второй версии операционной системы, и сразу же '
          'случился бум нативных приложений, который и сформировал рыночный '
          'ландшафт таким, каким мы его знаем теперь. \n'
          'Многое изменилось с тех пор, и web технологии на месте не стояли. '
          'Они шли по пути снятия ограничений, и то, что раньше было '
          'принципиально невозможно — работа оффлайн, фоновая синхронизация '
          'данных, push-нотификации, поддержка входа в один клик и оплаты с '
          'помощью кредитных карт, Apple Pay, Google Pay и других методов, '
          'встроенная в браузер — теперь реальность. Эти функции органично '
          'дополняют основную часть платформы — HTML/CSS и JavaScript, которая '
          'в последние годы развивалась более чем активными темпами. Например '
          'новый проект Houdini, который ещё находится на достаточно ранней '
          'стадии, снимает почти все ограничения на то, что можно сделать с '
          'помощью CSS, давая возможность среди прочего создавать свои лэйауты '
          'и использовать их наравне с Grid и Flexbox, и открывая программный '
          'доступ к внутренностям CSS движка. Но даже и без Houdini уже сейчас '
          'можно создавать CSS анимации, работающие со скоростью 60 FPS '
          '(frames per second).',
  'full_version': 'habr.com/ru/company/google/blog/414609/',
  'id': '414609',
  'published': '20  июня  2018 в 15:04',
  'title': 'Могут ли PWA (Progressive Web Apps) образца 2018 года составить '
           'достойную конкуренцию нативным приложениям?'},
 {'author': 'grvelvet',
  'body': 'Для тех кто в танке - wasm или WebAssembly это язык '
          'программирования низкого уровня для виртуальной стековой машины раз '
          'разработанный как портативная цель компиляции для высокоуровневых '
          'языков, таких как\xa0Си,\xa0C++,\xa0C#,\xa0Rust,\xa0Go. Проще '
          'говоря вы можете писать высокопроизводительный, компактный и '
          'переносимый код используя wasm. Наш Armory тоже использует wasm. '
          'Благодаря ему движок может работать в браузере и на других '
          'платформах с использованием Krom.',
  'full_version': 'habr.com/ru/post/531964/',
  'id': '531964',
  'published': '8  декабря  2020 в 16:35',
  'title': 'Wasm в Armory Engine'},
 {'author': 'batmandarkside',
  'body': 'Это перевод одной из статей Lin Clark. Если вы не читали остальные, '
          'мы рекомендуем начать с начала. \n'
          '\r\n'
          'Чтобы понять, как работает WebAssembly, неплохо понимать, что такое '
          'код на ассемблере и как компиляторы его генерируют. В статье о JIT '
          'я сравнивала взаимодействие с компьютером со взаимодействием с '
          'инопланетянином.',
  'full_version': 'habr.com/ru/company/raiffeisenbank/blog/348738/',
  'id': '348738',
  'published': '21  февраля  2018 в 15:57',
  'title': 'Ускоренный курс по ассемблерам'},
 {'author': 'PatientZero',
  'body': 'Введение\r\n'
          'Наша компания Leaning Technologies предоставляет решения по '
          'портированию традиционных desktop-приложений в веб. Наш компилятор '
          'C++ Cheerp генерирует сочетание WebAssembly и JavaScript, что '
          'обеспечивает и простое взаимодействие с браузером, и высокую '
          'производительность.\n'
          '\r\n'
          'В качестве примера его применения мы решили портировать для веба '
          'многопользовательскую игру и выбрали для этого Teeworlds. Teeworlds '
          '— это многопользовательская двухмерная ретро-игра с небольшим, но '
          'активным сообществом игроков (в их числе и я!). Она мала как с '
          'точки зрения скачиваемых ресурсов, так и требований к ЦП и GPU — '
          'идеальный кандидат.\n'
          '\n'
          '\n'
          'Работающая в браузере Teeworlds',
  'full_version': None,
  'id': '468031',
  'published': '20  сентября  2019 в 11:53',
  'title': 'Портируем многопользовательскую игру с С++ на веб c Cheerp, WebRTC '
           'и Firebase'},
 {'author': 'VanquisherWinbringer',
  'body': 'Привет, Хабр! Продолжаю делать интернет магазин на Blazor. В этой '
          'части расскажу о том как добавил в него витрину товаров и сделал '
          'свои компоненты. За подробностями добро пожаловать под кат.',
  'full_version': 'habr.com/ru/post/494612/',
  'id': '494612',
  'published': '1  апреля  2020 в 19:11',
  'title': 'Blazor Client Side Интернет Магазин: Часть 3 — Витрина товаров'},
 {'author': 'VanquisherWinbringer',
  'body': 'Привет, Хабр! Вышел релиз Blazor WebAssemby и я немного обновил '
          'свой сайт. За подробностями добро пожаловать под кат.',
  'full_version': 'habr.com/ru/post/503408/',
  'id': '503408',
  'published': '23  мая  2020 в 03:34',
  'title': 'Blazor Client Side Интернет Магазин: Часть 7 — Обновился до '
           'релизной версии 3.2.0 и добавил показ картинок'},
 {'author': 'Deamon87',
  'body': 'В этой статье я хотел бы пройтись и показать основные моменты того, '
          'как настроить IDE CLion для компиляции CMake проекта средствами '
          'Emscripten. Когда я занимался этим скрещиванием мне пришлось '
          'потратить день или два на эксперименты. И в этой заметке я '
          'собираюсь собрать некое "how to", которое в итоге сработало.',
  'full_version': 'habr.com/ru/post/522284/',
  'id': '522284',
  'published': '6  октября  2020 в 15:26',
  'title': 'Как скрестить Clion, Emscripten и Cmake'},
 {'author': 'yantishko',
  'body': 'В предыдущей статье я рассказывал о том, можно ли использовать '
          'машинное обучение (в частности определение лица и маски) в '
          'браузере, подходах к детекции и оптимизации всех процессов.\r\n'
          'Сегодня я хочу рассказать о технических подробностях реализации.',
  'full_version': 'habr.com/ru/post/563212/',
  'id': '563212',
  'published': '21  июня   в 17:03',
  'title': 'Как мы создали Web приложение для определения лиц и масок для '
           'Google Chrome (часть 2)'},
 {'author': 'honyaki',
  'body': 'К старту нашего флагманского курса по Data Science представляем '
          'перевод обзора JupyterLite прямо из блога его разработчиков. '
          'JupyterLite — это перезагрузка множества попыток создать полный '
          'статический выполняемый в браузере дистрибутив Jupyter, чтобы не '
          'было необходимости запускать сервер Jupyter. Цель проекта — дать '
          'лёгкую вычислительную среду в браузере, доступную по одному клику '
          'спустя несколько секунд, без установки чего-либо на устройство '
          'конечного пользователя. При работе с дистрибутивами в браузере не '
          'нужно предоставлять среду выполнения на бэкенде. Приложение в '
          'основном представляет собой набор статических файлов, поэтому проще '
          'масштабируется и его легче развёртывать.',
  'full_version': 'habr.com/ru/company/skillfactory/blog/573726/',
  'id': '573726',
  'published': '19  августа   в 16:18',
  'title': 'Как запустить Jupyter Notebook в браузере без бэкенда'},
 {'author': 'sereje4kin',
  'body': 'Продолжаем рассказывать о программе CodeFest 2018. На очереди — '
          'мощный фронт докладов фронтенд-секции.',
  'full_version': 'habr.com/ru/company/codefest/blog/350050/',
  'id': '350050',
  'published': '27  февраля  2018 в 11:19',
  'title': 'Frontend на CodeFest: React, Javascript и лучшие практики'},
 {'author': 'KsHoxton',
  'body': '28 марта MskDotNet и RaiffeisenIT Community приглашают на очередной '
          'митап сообщества. Мы открываем двери для всех, кто хочет делиться '
          'опытом и узнавать что-то новое. Митап пройдет на площадке '
          'Райффайзенбанка в офисе Нагатино.',
  'full_version': None,
  'id': '444746',
  'published': '21  марта  2019 в 20:15',
  'title': 'Приглашаем на MskDotNet Meetup #34 в Райффайзенбанк upd '
           'Трансляция'}]